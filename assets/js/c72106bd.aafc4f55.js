"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1388],{56758:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var r=t(85893),o=t(11151),a=t(65488),s=t(85162);const i={},l="Evaluation Metrics",c={id:"guides/evaluation/scorers",title:"Evaluation Metrics",description:"Evaluations in Weave",source:"@site/docs/guides/evaluation/scorers.md",sourceDirName:"guides/evaluation",slug:"/guides/evaluation/scorers",permalink:"/guides/evaluation/scorers",draft:!1,unlisted:!1,editUrl:"https://github.com/wandb/weave/blob/master/docs/docs/guides/evaluation/scorers.md",tags:[],version:"current",lastUpdatedAt:173826249e4,frontMatter:{},sidebar:"documentationSidebar",previous:{title:"Evaluations",permalink:"/guides/core-types/evaluations"},next:{title:"Guardrails and Monitors",permalink:"/guides/evaluation/guardrails_and_monitors"}},d={},u=[{value:"Evaluations in Weave",id:"evaluations-in-weave",level:2},{value:"Create your own Scorers",id:"create-your-own-scorers",level:2},{value:"Function-based Scorers",id:"function-based-scorers",level:3},{value:"Class-based Scorers",id:"class-based-scorers",level:3},{value:"How Scorers Work",id:"how-scorers-work",level:2},{value:"Scorer Keyword Arguments",id:"scorer-keyword-arguments",level:3},{value:"Mapping Column Names with <code>column_map</code>",id:"mapping-column-names-with-column_map",level:3},{value:"Mapping Column Names with <code>columnMapping</code>",id:"mapping-column-names-with-columnmapping",level:3},{value:"Final summarization of the scorer",id:"final-summarization-of-the-scorer",level:3},{value:"Predefined Scorers",id:"predefined-scorers",level:2},{value:"<code>HallucinationFreeScorer</code>",id:"hallucinationfreescorer",level:3},{value:"<code>SummarizationScorer</code>",id:"summarizationscorer",level:3},{value:"<code>OpenAIModerationScorer</code>",id:"openaimoderationscorer",level:3},{value:"<code>EmbeddingSimilarityScorer</code>",id:"embeddingsimilarityscorer",level:3},{value:"<code>ValidJSONScorer</code>",id:"validjsonscorer",level:3},{value:"<code>ValidXMLScorer</code>",id:"validxmlscorer",level:3},{value:"<code>PydanticScorer</code>",id:"pydanticscorer",level:3},{value:"RAGAS - <code>ContextEntityRecallScorer</code>",id:"ragas---contextentityrecallscorer",level:3},{value:"RAGAS - <code>ContextRelevancyScorer</code>",id:"ragas---contextrelevancyscorer",level:3}];function h(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"evaluation-metrics",children:"Evaluation Metrics"}),"\n",(0,r.jsx)(n.h2,{id:"evaluations-in-weave",children:"Evaluations in Weave"}),"\n",(0,r.jsx)(n.p,{children:"In Weave, Scorers are used to evaluate AI outputs and return evaluation metrics. They take the AI's output, analyze it, and return a dictionary of results. Scorers can use your input data as reference if needed and can also output extra information, such as explanations or reasonings from the evaluation."}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsxs)(n.p,{children:["Scorers are passed to a ",(0,r.jsx)(n.code,{children:"weave.Evaluation"})," object during evaluation. There are two types of Scorers in weave:"]}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Function-based Scorers:"})," Simple Python functions decorated with ",(0,r.jsx)(n.code,{children:"@weave.op"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Class-based Scorers:"})," Python classes that inherit from ",(0,r.jsx)(n.code,{children:"weave.Scorer"})," for more complex evaluations."]}),"\n"]}),(0,r.jsx)(n.p,{children:"Scorers must return a dictionary and can return multiple metrics, nested metrics and non-numeric values such as text returned from a LLM-evaluator about its reasoning."})]}),(0,r.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,r.jsxs)(n.p,{children:["Scorers are special ops passed to a ",(0,r.jsx)(n.code,{children:"weave.Evaluation"})," object during evaluation."]})})]}),"\n",(0,r.jsx)(n.h2,{id:"create-your-own-scorers",children:"Create your own Scorers"}),"\n",(0,r.jsx)(n.h3,{id:"function-based-scorers",children:"Function-based Scorers"}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsxs)(n.p,{children:["These are functions decorated with ",(0,r.jsx)(n.code,{children:"@weave.op"})," that return a dictionary. They're great for simple evaluations like:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import weave\n\n@weave.op\ndef evaluate_uppercase(text: str) -> dict:\n    return {"text_is_uppercase": text.isupper()}\n\nmy_eval = weave.Evaluation(\n    dataset=[{"text": "HELLO WORLD"}],\n    scorers=[evaluate_uppercase]\n)\n'})}),(0,r.jsxs)(n.p,{children:["When the evaluation is run, ",(0,r.jsx)(n.code,{children:"evaluate_uppercase"})," checks if the text is all uppercase."]})]}),(0,r.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,r.jsxs)(n.p,{children:["These are functions wrapped with ",(0,r.jsx)(n.code,{children:"weave.op"})," that accept an object with ",(0,r.jsx)(n.code,{children:"modelOutput"})," and optionally ",(0,r.jsx)(n.code,{children:"datasetRow"}),".  They're great for simple evaluations like:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import * as weave from 'weave'\n\nconst evaluateUppercase = weave.op(\n    ({modelOutput}) => modelOutput.toUpperCase() === modelOutput,\n    {name: 'textIsUppercase'}\n);\n\n\nconst myEval = new weave.Evaluation({\n    dataset: [{text: 'HELLO WORLD'}],\n    scorers: [evaluateUppercase],\n})\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"class-based-scorers",children:"Class-based Scorers"}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsxs)(n.p,{children:["For more advanced evaluations, especially when you need to keep track of additional scorer metadata, try different prompts for your LLM-evaluators, or make multiple function calls, you can use the ",(0,r.jsx)(n.code,{children:"Scorer"})," class."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements:"})}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Inherit from ",(0,r.jsx)(n.code,{children:"weave.Scorer"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Define a ",(0,r.jsx)(n.code,{children:"score"})," method decorated with ",(0,r.jsx)(n.code,{children:"@weave.op"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"score"})," method must return a dictionary."]}),"\n"]}),(0,r.jsx)(n.p,{children:"Example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import weave\nfrom openai import OpenAI\nfrom weave import Scorer\n\nllm_client = OpenAI()\n\n#highlight-next-line\nclass SummarizationScorer(Scorer):\n    model_id: str = "gpt-4o"\n    system_prompt: str = "Evaluate whether the summary is good."\n\n    @weave.op\n    def some_complicated_preprocessing(self, text: str) -> str:\n        processed_text = "Original text: \\n" + text + "\\n"\n        return processed_text\n\n    @weave.op\n    def call_llm(self, summary: str, processed_text: str) -> dict:\n        res = llm_client.chat.completions.create(\n            messages=[\n                {"role": "system", "content": self.system_prompt},\n                {"role": "user", "content": (\n                    f"Analyse how good the summary is compared to the original text."\n                    f"Summary: {summary}\\n{processed_text}"\n                )}])\n        return {"summary_quality": res}\n\n    @weave.op\n    def score(self, output: str, text: str) -> dict:\n        """Score the summary quality.\n\n        Args:\n            output: The summary generated by an AI system\n            text: The original text being summarized\n        """\n        processed_text = self.some_complicated_preprocessing(text)\n        eval_result = self.call_llm(summary=output, processed_text=processed_text)\n        return {"summary_quality": eval_result}\n\nevaluation = weave.Evaluation(\n    dataset=[{"text": "The quick brown fox jumps over the lazy dog."}],\n    scorers=[summarization_scorer])\n'})}),(0,r.jsx)(n.p,{children:"This class evaluates how good a summary is by comparing it to the original text."})]}),(0,r.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]}),"\n",(0,r.jsx)(n.h2,{id:"how-scorers-work",children:"How Scorers Work"}),"\n",(0,r.jsx)(n.h3,{id:"scorer-keyword-arguments",children:"Scorer Keyword Arguments"}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsx)(n.p,{children:"Scorers can access both the output from your AI system and the input data from the dataset row."}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Input:"}),' If you would like your scorer to use data from your dataset row, such as a "label" or "target" column then you can easily make this available to the scorer by adding a ',(0,r.jsx)(n.code,{children:"label"})," or ",(0,r.jsx)(n.code,{children:"target"})," keyword argument to your scorer definition."]}),"\n"]}),(0,r.jsxs)(n.p,{children:['For example if you wanted to use a column called "label" from your dataset then your scorer function (or ',(0,r.jsx)(n.code,{children:"score"})," class method) would have a parameter list like this:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"@weave.op\ndef my_custom_scorer(output: str, label: int) -> dict:\n    ...\n"})}),(0,r.jsxs)(n.p,{children:["When a weave ",(0,r.jsx)(n.code,{children:"Evaluation"})," is run, the output of the AI system is passed to the ",(0,r.jsx)(n.code,{children:"output"})," parameter. The ",(0,r.jsx)(n.code,{children:"Evaluation"})," also automatically tries to match any additional scorer argument names to your dataset columns. If customizing your scorer arguments or dataset columns is not feasible, you can use column mapping - see below for more."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Output:"})," Include an ",(0,r.jsx)(n.code,{children:"output"})," parameter in your scorer function's signature to access the AI system's output."]}),"\n"]}),(0,r.jsxs)(n.h3,{id:"mapping-column-names-with-column_map",children:["Mapping Column Names with ",(0,r.jsx)(n.code,{children:"column_map"})]}),(0,r.jsxs)(n.p,{children:["Sometimes, the ",(0,r.jsx)(n.code,{children:"score"})," methods' argument names don't match the column names in your dataset. You can fix this using a ",(0,r.jsx)(n.code,{children:"column_map"}),"."]}),(0,r.jsxs)(n.p,{children:["If you're using a class-based scorer, pass a dictionary to the ",(0,r.jsx)(n.code,{children:"column_map"})," attribute of ",(0,r.jsx)(n.code,{children:"Scorer"})," when you initialise your scorer class. This dictionary maps your ",(0,r.jsx)(n.code,{children:"score"})," method's argument names to the dataset's column names, in the order: ",(0,r.jsx)(n.code,{children:"{scorer_keyword_argument: dataset_column_name}"}),"."]}),(0,r.jsx)(n.p,{children:"Example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import weave\nfrom weave import Scorer\n\n# A dataset with news articles to be summarised\ndataset = [\n    {"news_article": "The news today was great...", "date": "2030-04-20", "source": "Bright Sky Network"},\n    ...\n]\n\n# Scorer class\nclass SummarizationScorer(Scorer):\n\n    @weave.op\n    def score(output, text) -> dict:\n        """\n            output: output summary from a LLM summarization system\n            text: the text being summarised\n        """\n        ...  # evaluate the quality of the summary\n\n# create a scorer with a column mapping the `text` argument to the `news_article` data column\nscorer = SummarizationScorer(column_map={"text" : "news_article"})\n'})}),(0,r.jsxs)(n.p,{children:["Now, the ",(0,r.jsx)(n.code,{children:"text"})," argument in the ",(0,r.jsx)(n.code,{children:"score"})," method will receive data from the ",(0,r.jsx)(n.code,{children:"news_article"})," dataset column."]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Another equivalent option to map your columns is to subclass the ",(0,r.jsx)(n.code,{children:"Scorer"})," and overload the ",(0,r.jsx)(n.code,{children:"score"})," method mapping the columns explicitly."]}),"\n"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import weave\nfrom weave import Scorer\n\nclass MySummarizationScorer(SummarizationScorer):\n\n    @weave.op\n    def score(self, output: str, news_article: str) -> dict:  # Added type hints\n        # overload the score method and map columns manually\n        return super().score(output=output, text=news_article)\n"})})]}),(0,r.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,r.jsx)(n.p,{children:"Scorers can access both the output from your AI system and the contents of the dataset row."}),(0,r.jsxs)(n.p,{children:["You can easily access relevant columns from the dataset row by adding a ",(0,r.jsx)(n.code,{children:"datasetRow"})," keyword argument to your scorer definition."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const myScorer = weave.op(\n    ({modelOutput, datasetRow}) => {\n        return modelOutput * 2 === datasetRow.expectedOutputTimesTwo;\n    },\n    {name: 'myScorer'}\n);\n"})}),(0,r.jsxs)(n.h3,{id:"mapping-column-names-with-columnmapping",children:["Mapping Column Names with ",(0,r.jsx)(n.code,{children:"columnMapping"})]}),(0,r.jsx)(n.admonition,{type:"important",children:(0,r.jsxs)(n.p,{children:["In TypeScript, this feature is currently on the ",(0,r.jsx)(n.code,{children:"Evaluation"})," object, not individual scorers."]})}),(0,r.jsxs)(n.p,{children:["Sometimes your ",(0,r.jsx)(n.code,{children:"datasetRow"})," keys will not exactly match the scorer's naming scheme, but they are semantically similar. You can map the columns using the ",(0,r.jsx)(n.code,{children:"Evaluation"}),"'s ",(0,r.jsx)(n.code,{children:"columnMapping"})," option."]}),(0,r.jsxs)(n.p,{children:["The mapping is always from the scorer's perspective, i.e. ",(0,r.jsx)(n.code,{children:"{scorer_key: dataset_column_name}"}),"."]}),(0,r.jsx)(n.p,{children:"Example:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const myScorer = weave.op(\n    ({modelOutput, datasetRow}) => {\n        return modelOutput * 2 === datasetRow.expectedOutputTimesTwo;\n    },\n    {name: 'myScorer'}\n);\n\nconst myEval = new weave.Evaluation({\n    dataset: [{expected: 2}],\n    scorers: [myScorer],\n    columnMapping: {expectedOutputTimesTwo: 'expected'}\n});\n"})})]})]}),"\n",(0,r.jsx)(n.h3,{id:"final-summarization-of-the-scorer",children:"Final summarization of the scorer"}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsxs)(n.p,{children:["During evaluation, the scorer will be computed for each row of your dataset. To provide a final score for the evaluation we provide an ",(0,r.jsx)(n.code,{children:"auto_summarize"})," depending on the returning type of the output."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Averages are computed for numerical columns"}),"\n",(0,r.jsx)(n.li,{children:"Count and fraction for boolean columns"}),"\n",(0,r.jsx)(n.li,{children:"Other column types are ignored"}),"\n"]}),(0,r.jsxs)(n.p,{children:["You can override the ",(0,r.jsx)(n.code,{children:"summarize"})," method on the ",(0,r.jsx)(n.code,{children:"Scorer"})," class and provide your own way of computing the final scores. The ",(0,r.jsx)(n.code,{children:"summarize"})," function expects:"]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["A single parameter ",(0,r.jsx)(n.code,{children:"score_rows"}),": This is a list of dictionaries, where each dictionary contains the scores returned by the ",(0,r.jsx)(n.code,{children:"score"})," method for a single row of your dataset."]}),"\n",(0,r.jsx)(n.li,{children:"It should return a dictionary containing the summarized scores."}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why this is useful?"})}),(0,r.jsx)(n.p,{children:"When you need to score all rows before deciding on the final value of the score for the dataset."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'class MyBinaryScorer(Scorer):\n    """\n    Returns True if the full output matches the target, False if not\n    """\n\n    @weave.op\n    def score(output, target):\n        return {"match": if output == target}\n\n    def summarize(self, score_rows: list) -> dict:\n        full_match = all(row["match"] for row in score_rows)\n        return {"full_match": full_match}\n'})}),(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["In this example, the default ",(0,r.jsx)(n.code,{children:"auto_summarize"})," would have returned the count and proportion of True."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["If you want to learn more, check the implementation of ",(0,r.jsx)(n.a,{href:"/tutorial-rag#optional-defining-a-scorer-class",children:"CorrectnessLLMJudge"}),"."]})]}),(0,r.jsxs)(s.default,{value:"typescript",label:"TypeScript",children:[(0,r.jsxs)(n.p,{children:["During evaluation, the scorer will be computed for each row of your dataset.  To provide a final score, we use an internal ",(0,r.jsx)(n.code,{children:"summarizeResults"})," function that aggregates depending on the output type."]}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Averages are computed for numerical columns"}),"\n",(0,r.jsx)(n.li,{children:"Count and fraction for boolean columns"}),"\n",(0,r.jsx)(n.li,{children:"Other column types are ignored"}),"\n"]}),(0,r.jsx)(n.p,{children:"We don't currently support custom summarization."})]})]}),"\n",(0,r.jsx)(n.h2,{id:"predefined-scorers",children:"Predefined Scorers"}),"\n",(0,r.jsxs)(a.Z,{groupId:"programming-language",queryString:!0,children:[(0,r.jsxs)(s.default,{value:"python",label:"Python",default:!0,children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Installation"})}),(0,r.jsx)(n.p,{children:"To use Weave's predefined scorers you need to install some additional dependencies:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install weave[scorers]\n"})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"LLM-evaluators"})}),(0,r.jsxs)(n.p,{children:["The pre-defined scorers that use LLMs support the OpenAI, Anthropic, Google GenerativeAI and MistralAI clients. They also use ",(0,r.jsx)(n.code,{children:"weave"}),"'s ",(0,r.jsx)(n.code,{children:"InstructorLLMScorer"})," class, so you'll need to install the ",(0,r.jsx)(n.a,{href:"https://github.com/instructor-ai/instructor",children:(0,r.jsx)(n.code,{children:"instructor"})})," Python package to be able to use them. You can get all necessary dependencies with ",(0,r.jsx)(n.code,{children:'pip install "weave[scorers]"'})]}),(0,r.jsx)(n.h3,{id:"hallucinationfreescorer",children:(0,r.jsx)(n.code,{children:"HallucinationFreeScorer"})}),(0,r.jsx)(n.p,{children:"This scorer checks if your AI system's output includes any hallucinations based on the input data."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import HallucinationFreeScorer\n\nllm_client = ... # initialize your LLM client here\n\nscorer = HallucinationFreeScorer(\n    client=llm_client,\n    model_id="gpt-4o"\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Customization:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Customize the ",(0,r.jsx)(n.code,{children:"system_prompt"})," and ",(0,r.jsx)(n.code,{children:"user_prompt"}),' attributes of the scorer to define what "hallucination" means for you.']}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"score"})," method expects an input column named ",(0,r.jsx)(n.code,{children:"context"}),". If your dataset uses a different name, use the ",(0,r.jsx)(n.code,{children:"column_map"})," attribute to map ",(0,r.jsx)(n.code,{children:"context"})," to the dataset column."]}),"\n"]}),(0,r.jsx)(n.p,{children:"Here you have an example in the context of an evaluation:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom openai import OpenAI\nimport weave\nfrom weave.scorers import HallucinationFreeScorer\n\n# Initialize clients and scorers\nllm_client = OpenAI()\nhallucination_scorer = HallucinationFreeScorer(\n    client=llm_client,\n    model_id="gpt-4o",\n    column_map={"context": "input", "output": "other_col"}\n)\n\n# Create dataset\ndataset = [\n    {"input": "John likes various types of cheese."},\n    {"input": "Pepe likes various types of cheese."},\n]\n\n@weave.op\ndef model(input: str) -> str:\n    return "The person\'s favorite cheese is cheddar."\n\n# Run evaluation\nevaluation = weave.Evaluation(\n    dataset=dataset,\n    scorers=[hallucination_scorer],\n)\nresult = asyncio.run(evaluation.evaluate(model))\nprint(result)\n# {\'HallucinationFreeScorer\': {\'has_hallucination\': {\'true_count\': 2, \'true_fraction\': 1.0}}, \'model_latency\': {\'mean\': 1.4395725727081299}}\n'})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"summarizationscorer",children:(0,r.jsx)(n.code,{children:"SummarizationScorer"})}),(0,r.jsx)(n.p,{children:"Use an LLM to compare a summary to the original text and evaluate the quality of the summary."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import SummarizationScorer\n\nllm_client = ... # initialize your LLM client here\n\nscorer = SummarizationScorer(\n    client=llm_client,\n    model_id="gpt-4o"\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How It Works:"})}),(0,r.jsx)(n.p,{children:"This scorer evaluates summaries in two ways:"}),(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Entity Density:"}),' Checks the ratio of unique entities (like names, places, or things) mentioned in the summary to the total word count in the summary in order to estimate the "information density" of the summary. Uses an LLM to extract the entities. Similar to how entity density is used in the Chain of Density paper, ',(0,r.jsx)(n.a,{href:"https://arxiv.org/abs/2309.04269",children:"https://arxiv.org/abs/2309.04269"})]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quality Grading:"})," Uses an LLM-evaluator to grade the summary as ",(0,r.jsx)(n.code,{children:"poor"}),", ",(0,r.jsx)(n.code,{children:"ok"}),", or ",(0,r.jsx)(n.code,{children:"excellent"}),". These grades are converted to scores (0.0 for poor, 0.5 for ok, and 1.0 for excellent) so you can calculate averages."]}),"\n"]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Customization:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Adjust ",(0,r.jsx)(n.code,{children:"summarization_evaluation_system_prompt"})," and ",(0,r.jsx)(n.code,{children:"summarization_evaluation_prompt"})," to define what makes a good summary."]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["This scorer uses the ",(0,r.jsx)(n.code,{children:"InstructorLLMScorer"})," class."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"score"})," method expects the original text that was summarized to be present in the ",(0,r.jsx)(n.code,{children:"input"})," column of the dataset. Use the ",(0,r.jsx)(n.code,{children:"column_map"})," class attribute to map ",(0,r.jsx)(n.code,{children:"input"})," to the correct dataset column if needed."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["Here you have an example usage of the ",(0,r.jsx)(n.code,{children:"SummarizationScorer"})," in the context of an evaluation:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nfrom openai import OpenAI\nimport weave\nfrom weave.scorers import SummarizationScorer\n\nclass SummarizationModel(weave.Model):\n    @weave.op()\n    async def predict(self, input: str) -> str:\n        return \"This is a summary of the input text.\"\n\n# Initialize clients and scorers\nllm_client = OpenAI()\nmodel = SummarizationModel()\nsummarization_scorer = SummarizationScorer(\n    client=llm_client,\n    model_id=\"gpt-4o\",\n)\n# Create dataset\ndataset = [\n    {\"input\": \"The quick brown fox jumps over the lazy dog.\"},\n    {\"input\": \"Artificial Intelligence is revolutionizing various industries.\"}\n]\n\n# Run evaluation\nevaluation = weave.Evaluation(dataset=dataset, scorers=[summarization_scorer])\nresults = asyncio.run(evaluation.evaluate(model))\nprint(results)\n# {'SummarizationScorer': {'is_entity_dense': {'true_count': 0, 'true_fraction': 0.0}, 'summarization_eval_score': {'mean': 0.0}, 'entity_density': {'mean': 0.0}}, 'model_latency': {'mean': 6.210803985595703e-05}}\n"})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"openaimoderationscorer",children:(0,r.jsx)(n.code,{children:"OpenAIModerationScorer"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"OpenAIModerationScorer"})," uses OpenAI's Moderation API to check if the AI system's output contains disallowed content, such as hate speech or explicit material."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import OpenAIModerationScorer\nfrom openai import OpenAI\n\noai_client = OpenAI() # initialize your LLM client here\n\nscorer = OpenAIModerationScorer(\n    client=oai_client,\n    model_id="text-embedding-3-small"\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How It Works:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sends the AI's output to the OpenAI Moderation endpoint and returns a dictionary indicating whether the content is flagged and details about the categories involved."}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Requires the ",(0,r.jsx)(n.code,{children:"openai"})," Python package."]}),"\n",(0,r.jsxs)(n.li,{children:["The client must be an instance of OpenAI's ",(0,r.jsx)(n.code,{children:"OpenAI"})," or ",(0,r.jsx)(n.code,{children:"AsyncOpenAI"})," client."]}),"\n"]}),(0,r.jsx)(n.p,{children:"Here you have an example in the context of an evaluation:"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nfrom openai import OpenAI\nimport weave\nfrom weave.scorers import OpenAIModerationScorer\n\nclass MyModel(weave.Model):\n    @weave.op\n    async def predict(self, input: str) -> str:\n        return input\n\n# Initialize clients and scorers\nclient = OpenAI()\nmodel = MyModel()\nmoderation_scorer = OpenAIModerationScorer(client=client)\n\n# Create dataset\ndataset = [\n    {\"input\": \"I love puppies and kittens!\"},\n    {\"input\": \"I hate everyone and want to hurt them.\"}\n]\n\n# Run evaluation\nevaluation = weave.Evaluation(dataset=dataset, scorers=[moderation_scorer])\nresults = asyncio.run(evaluation.evaluate(model))\nprint(results)\n# {'OpenAIModerationScorer': {'flagged': {'true_count': 1, 'true_fraction': 0.5}, 'categories': {'violence': {'true_count': 1, 'true_fraction': 1.0}}}, 'model_latency': {'mean': 9.500980377197266e-05}}\n"})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"embeddingsimilarityscorer",children:(0,r.jsx)(n.code,{children:"EmbeddingSimilarityScorer"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"EmbeddingSimilarityScorer"})," computes the cosine similarity between the embeddings of the AI system's output and a target text from your dataset. It's useful for measuring how similar the AI's output is to a reference text."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import EmbeddingSimilarityScorer\n\nllm_client = ...  # initialise your LlM client\n\nsimilarity_scorer = EmbeddingSimilarityScorer(\n    client=llm_client\n    target_column="reference_text",  # the dataset column to compare the output against\n    threshold=0.4  # the cosine similarity threshold to use\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"target"}),": This scorer expects a ",(0,r.jsx)(n.code,{children:"target"})," column in your dataset, it will calculate the cosine similarity of the embeddings of the ",(0,r.jsx)(n.code,{children:"target"})," column to the AI system output. If your dataset doesn't contain a column called ",(0,r.jsx)(n.code,{children:"target"})," you can use the scorers ",(0,r.jsx)(n.code,{children:"column_map"})," attribute to map ",(0,r.jsx)(n.code,{children:"target"})," to the appropriate column name in your dataset. See the Column Mapping section for more."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"threshold"})," (float): The minimum cosine similarity score between the embedding of the AI system output and the embdedding of the ",(0,r.jsx)(n.code,{children:"target"}),', above which the 2 samples are considered "similar", (defaults to ',(0,r.jsx)(n.code,{children:"0.5"}),"). ",(0,r.jsx)(n.code,{children:"threshold"})," can be in a range from -1 to 1:"]}),"\n",(0,r.jsx)(n.li,{children:"1 indicates identical direction."}),"\n",(0,r.jsx)(n.li,{children:"0 indicates orthogonal vectors."}),"\n",(0,r.jsx)(n.li,{children:"-1 indicates opposite direction."}),"\n"]}),(0,r.jsx)(n.p,{children:"The correct cosine similarity threshold to set can fluctuate quite a lot depending on your use case, we advise exploring different thresholds."}),(0,r.jsxs)(n.p,{children:["Here you have an example usage of the ",(0,r.jsx)(n.code,{children:"EmbeddingSimilarityScorer"})," in the context of an evaluation:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom openai import OpenAI\nimport weave\nfrom weave.scorers import EmbeddingSimilarityScorer\n\n# Initialize clients and scorers\nclient = OpenAI()\nsimilarity_scorer = EmbeddingSimilarityScorer(\n    client=client,\n    threshold=0.7,\n    column_map={"target": "reference"}\n)\n\n# Create dataset\ndataset = [\n    {\n        "input": "He\'s name is John",\n        "reference": "John likes various types of cheese.",\n    },\n    {\n        "input": "He\'s name is Pepe.",\n        "reference": "Pepe likes various types of cheese.",\n    },\n]\n\n# Define model\n@weave.op\ndef model(input: str) -> str:\n    return "John likes various types of cheese."\n\n# Run evaluation\nevaluation = weave.Evaluation(\n    dataset=dataset,\n    scorers=[similarity_scorer],\n)\nresult = asyncio.run(evaluation.evaluate(model))\nprint(result)\n# {\'EmbeddingSimilarityScorer\': {\'is_similar\': {\'true_count\': 1, \'true_fraction\': 0.5}, \'similarity_score\': {\'mean\': 0.8448514031462045}}, \'model_latency\': {\'mean\': 0.45862746238708496}}\n'})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"validjsonscorer",children:(0,r.jsx)(n.code,{children:"ValidJSONScorer"})}),(0,r.jsx)(n.p,{children:"The ValidJSONScorer checks whether the AI system's output is valid JSON. This scorer is useful when you expect the output to be in JSON format and need to verify its validity."}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from weave.scorers import ValidJSONScorer\n\njson_scorer = ValidJSONScorer()\n"})}),(0,r.jsxs)(n.p,{children:["Here you have an example usage of the ",(0,r.jsx)(n.code,{children:"ValidJSONScorer"})," in the context of an evaluation:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nimport weave\nfrom weave.scorers import ValidJSONScorer\n\nclass JSONModel(weave.Model):\n    @weave.op()\n    async def predict(self, input: str) -> str:\n        # This is a placeholder.\n        # In a real scenario, this would generate JSON.\n        return '{\"key\": \"value\"}'\n\nmodel = JSONModel()\njson_scorer = ValidJSONScorer()\n\ndataset = [\n    {\"input\": \"Generate a JSON object with a key and value\"},\n    {\"input\": \"Create an invalid JSON\"}\n]\n\nevaluation = weave.Evaluation(dataset=dataset, scorers=[json_scorer])\nresults = asyncio.run(evaluation.evaluate(model))\nprint(results)\n# {'ValidJSONScorer': {'json_valid': {'true_count': 2, 'true_fraction': 1.0}}, 'model_latency': {'mean': 8.58306884765625e-05}}\n"})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"validxmlscorer",children:(0,r.jsx)(n.code,{children:"ValidXMLScorer"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ValidXMLScorer"})," checks whether the AI system's output is valid XML. This is useful when expecting XML-formatted outputs."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from weave.scorers import ValidXMLScorer\n\nxml_scorer = ValidXMLScorer()\n"})}),(0,r.jsxs)(n.p,{children:["Here you have an example usage of the ",(0,r.jsx)(n.code,{children:"ValidXMLScorer"})," in the context of an evaluation:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nimport weave\nfrom weave.scorers import ValidXMLScorer\n\nclass XMLModel(weave.Model):\n    @weave.op()\n    async def predict(self, input: str) -> str:\n        # This is a placeholder. In a real scenario, this would generate XML.\n        return '<root><element>value</element></root>'\n\nmodel = XMLModel()\nxml_scorer = ValidXMLScorer()\n\ndataset = [\n    {\"input\": \"Generate a valid XML with a root element\"},\n    {\"input\": \"Create an invalid XML\"}\n]\n\nevaluation = weave.Evaluation(dataset=dataset, scorers=[xml_scorer])\nresults = asyncio.run(evaluation.evaluate(model))\nprint(results)\n# {'ValidXMLScorer': {'xml_valid': {'true_count': 2, 'true_fraction': 1.0}}, 'model_latency': {'mean': 8.20159912109375e-05}}\n"})}),(0,r.jsx)(n.hr,{}),(0,r.jsx)(n.h3,{id:"pydanticscorer",children:(0,r.jsx)(n.code,{children:"PydanticScorer"})}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"PydanticScorer"})," validates the AI system's output against a Pydantic model to ensure it adheres to a specified schema or data structure."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from weave.scorers import PydanticScorer\nfrom pydantic import BaseModel\n\nclass FinancialReport(BaseModel):\n    revenue: int\n    year: str\n\npydantic_scorer = PydanticScorer(model=FinancialReport)\n"})}),(0,r.jsx)(n.hr,{}),(0,r.jsxs)(n.h3,{id:"ragas---contextentityrecallscorer",children:["RAGAS - ",(0,r.jsx)(n.code,{children:"ContextEntityRecallScorer"})]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContextEntityRecallScorer"})," estimates context recall by extracting entities from both the AI system's output and the provided context, then computing the recall score. Based on the ",(0,r.jsx)(n.a,{href:"https://github.com/explodinggradients/ragas",children:"RAGAS"})," evaluation library"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import ContextEntityRecallScorer\n\nllm_client = ...  # initialise your LlM client\n\nentity_recall_scorer = ContextEntityRecallScorer(\n    client=llm_client\n    model_id="your-model-id"\n)\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How It Works:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses an LLM to extract unique entities from the output and context and calculates recall."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recall"})," indicates the proportion of important entities from the context that are captured in the output, helping to assess the model's effectiveness in retrieving relevant information."]}),"\n",(0,r.jsx)(n.li,{children:"Returns a dictionary with the recall score."}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Expects a ",(0,r.jsx)(n.code,{children:"context"})," column in your dataset, use ",(0,r.jsx)(n.code,{children:"column_map"})," to map ",(0,r.jsx)(n.code,{children:"context"})," to another dataset column if needed."]}),"\n"]}),(0,r.jsx)(n.hr,{}),(0,r.jsxs)(n.h3,{id:"ragas---contextrelevancyscorer",children:["RAGAS - ",(0,r.jsx)(n.code,{children:"ContextRelevancyScorer"})]}),(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"ContextRelevancyScorer"})," evaluates the relevancy of the provided context to the AI system's output. It helps determine if the context used is appropriate for generating the output. Based on the ",(0,r.jsx)(n.a,{href:"https://github.com/explodinggradients/ragas",children:"RAGAS"})," evaluation library."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from weave.scorers import ContextRelevancyScorer\n\nllm_client = ...  # initialise your LlM client\n\nrelevancy_scorer = ContextRelevancyScorer(\n    llm_client = ...  # initialise your LlM client\n    model_id="your-model-id"\n    )\n'})}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How It Works:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Uses an LLM to rate the relevancy of the context to the output on a scale from 0 to 1."}),"\n",(0,r.jsxs)(n.li,{children:["Returns a dictionary with the ",(0,r.jsx)(n.code,{children:"relevancy_score"}),"."]}),"\n"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Notes:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Expects a ",(0,r.jsx)(n.code,{children:"context"})," column in your dataset, use ",(0,r.jsx)(n.code,{children:"column_map"})," to map ",(0,r.jsx)(n.code,{children:"context"})," to another dataset column if needed."]}),"\n",(0,r.jsxs)(n.li,{children:["Customize the ",(0,r.jsx)(n.code,{children:"relevancy_prompt"})," to define how relevancy is assessed."]}),"\n"]}),(0,r.jsxs)(n.p,{children:["Here you have an example usage of ",(0,r.jsx)(n.code,{children:"ContextEntityRecallScorer"})," and ",(0,r.jsx)(n.code,{children:"ContextRelevancyScorer"})," in the context of an evaluation:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nfrom textwrap import dedent\nfrom openai import OpenAI\nimport weave\nfrom weave.scorers import ContextEntityRecallScorer, ContextRelevancyScorer\n\nclass RAGModel(weave.Model):\n    @weave.op()\n    async def predict(self, question: str) -> str:\n        "Retrieve relevant context"\n        return "Paris is the capital of France."\n\n\nmodel = RAGModel()\n\n# Define prompts\nrelevancy_prompt: str = dedent("""\n    Given the following question and context, rate the relevancy of the context to the question on a scale from 0 to 1.\n\n    Question: {question}\n    Context: {context}\n    Relevancy Score (0-1):\n    """)\n\n# Initialize clients and scorers\nllm_client = OpenAI()\nentity_recall_scorer = ContextEntityRecallScorer(\n    client=client,\n    model_id="gpt-4o",\n)\n\nrelevancy_scorer = ContextRelevancyScorer(\n    client=llm_client,\n    model_id="gpt-4o",\n    relevancy_prompt=relevancy_prompt\n)\n\n# Create dataset\ndataset = [\n    {\n        "question": "What is the capital of France?",\n        "context": "Paris is the capital city of France."\n    },\n    {\n        "question": "Who wrote Romeo and Juliet?",\n        "context": "William Shakespeare wrote many famous plays."\n    }\n]\n\n# Run evaluation\nevaluation = weave.Evaluation(\n    dataset=dataset,\n    scorers=[entity_recall_scorer, relevancy_scorer]\n)\nresults = asyncio.run(evaluation.evaluate(model))\nprint(results)\n# {\'ContextEntityRecallScorer\': {\'recall\': {\'mean\': 0.3333333333333333}}, \'ContextRelevancyScorer\': {\'relevancy_score\': {\'mean\': 0.5}}, \'model_latency\': {\'mean\': 9.393692016601562e-05}}\n'})})]}),(0,r.jsx)(s.default,{value:"typescript",label:"TypeScript",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:"This feature is not available in TypeScript yet.  Stay tuned!\n"})})})]})]})}function m(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},85162:(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});t(67294);var r=t(90512);const o={tabItem:"tabItem_Ymn6"};var a=t(85893);function s(e){let{children:n,hidden:t,className:s}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,s),hidden:t,children:n})}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(67294),o=t(90512),a=t(12466),s=t(70989),i=t(72389);const l={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var c=t(85893);function d(e){let{className:n,block:t,selectedValue:r,selectValue:s,tabValues:i}=e;const d=[],{blockElementScrollPositionUntilNextRender:u}=(0,a.o5)(),h=e=>{const n=e.currentTarget,t=d.indexOf(n),o=i[t].value;o!==r&&(u(n),s(o))},m=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{const t=d.indexOf(e.currentTarget)+1;n=d[t]??d[0];break}case"ArrowLeft":{const t=d.indexOf(e.currentTarget)-1;n=d[t]??d[d.length-1];break}}n?.focus()};return(0,c.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n),children:i.map((e=>{let{value:n,label:t,attributes:a}=e;return(0,c.jsx)("li",{role:"tab",tabIndex:r===n?0:-1,"aria-selected":r===n,ref:e=>d.push(e),onKeyDown:m,onClick:h,...a,className:(0,o.Z)("tabs__item",l.tabItem,a?.className,{"tabs__item--active":r===n}),children:t??n},n)}))})}function u(e){let{lazy:n,children:t,selectedValue:o}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return(0,c.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function h(e){const n=(0,s.Y)(e);return(0,c.jsxs)("div",{className:(0,o.Z)("tabs-container",l.tabList),children:[(0,c.jsx)(d,{...n,...e}),(0,c.jsx)(u,{...n,...e})]})}function m(e){const n=(0,i.default)();return(0,c.jsx)(h,{...e,children:(0,s.h)(e.children)},String(n))}},70989:(e,n,t)=>{t.d(n,{Y:()=>m,h:()=>c});var r=t(67294),o=t(16550),a=t(20469),s=t(91980),i=t(67392),l=t(20812);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return c(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:o}}=e;return{value:n,label:t,attributes:r,default:o}}))}(t);return function(e){const n=(0,i.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,o.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:o}=e,s=d(e),[i,c]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!u({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[m,p]=h({queryString:t,groupId:o}),[x,y]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[o,a]=(0,l.Nk)(t);return[o,(0,r.useCallback)((e=>{t&&a.set(e)}),[t,a])]}({groupId:o}),j=(()=>{const e=m??x;return u({value:e,tabValues:s})?e:null})();(0,a.Z)((()=>{j&&c(j)}),[j]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);c(e),p(e),y(e)}),[p,y,s]),tabValues:s}}},11151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>s});var r=t(67294);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);