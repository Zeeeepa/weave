/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { WandbCore } from "../core.js";
import { callsQueryStats } from "../funcs/callsQueryStats.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useWandbContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CallsQueryStatsMutationVariables = {
  request: components.CallsQueryStatsReq;
  options?: RequestOptions;
};

export type CallsQueryStatsMutationData = components.CallsQueryStatsRes;

/**
 * Calls Query Stats
 */
export function useCallsQueryStatsMutation(
  options?: MutationHookOptions<
    CallsQueryStatsMutationData,
    Error,
    CallsQueryStatsMutationVariables
  >,
): UseMutationResult<
  CallsQueryStatsMutationData,
  Error,
  CallsQueryStatsMutationVariables
> {
  const client = useWandbContext();
  return useMutation({
    ...buildCallsQueryStatsMutation(client, options),
    ...options,
  });
}

export function mutationKeyCallsQueryStats(): MutationKey {
  return ["wandb", "Calls", "queryStats"];
}

export function buildCallsQueryStatsMutation(
  client$: WandbCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CallsQueryStatsMutationVariables,
  ) => Promise<CallsQueryStatsMutationData>;
} {
  return {
    mutationKey: mutationKeyCallsQueryStats(),
    mutationFn: function callsQueryStatsMutationFn({
      request,
      options,
    }): Promise<CallsQueryStatsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(callsQueryStats(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
