/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { WandbCore } from "../core.js";
import { tablesCreate } from "../funcs/tablesCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useWandbContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TablesCreateMutationVariables = {
  request: components.TableCreateReq;
  options?: RequestOptions;
};

export type TablesCreateMutationData = components.TableCreateRes;

/**
 * Table Create
 */
export function useTablesCreateMutation(
  options?: MutationHookOptions<
    TablesCreateMutationData,
    Error,
    TablesCreateMutationVariables
  >,
): UseMutationResult<
  TablesCreateMutationData,
  Error,
  TablesCreateMutationVariables
> {
  const client = useWandbContext();
  return useMutation({
    ...buildTablesCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyTablesCreate(): MutationKey {
  return ["wandb", "Tables", "create"];
}

export function buildTablesCreateMutation(
  client$: WandbCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TablesCreateMutationVariables,
  ) => Promise<TablesCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyTablesCreate(),
    mutationFn: function tablesCreateMutationFn({
      request,
      options,
    }): Promise<TablesCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(tablesCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
