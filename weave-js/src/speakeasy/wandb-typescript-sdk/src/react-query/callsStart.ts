/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { WandbCore } from "../core.js";
import { callsStart } from "../funcs/callsStart.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useWandbContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CallsStartMutationVariables = {
  request: components.CallStartReq;
  options?: RequestOptions;
};

export type CallsStartMutationData = components.CallStartRes;

/**
 * Call Start
 */
export function useCallsStartMutation(
  options?: MutationHookOptions<
    CallsStartMutationData,
    Error,
    CallsStartMutationVariables
  >,
): UseMutationResult<
  CallsStartMutationData,
  Error,
  CallsStartMutationVariables
> {
  const client = useWandbContext();
  return useMutation({
    ...buildCallsStartMutation(client, options),
    ...options,
  });
}

export function mutationKeyCallsStart(): MutationKey {
  return ["wandb", "Calls", "start"];
}

export function buildCallsStartMutation(
  client$: WandbCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CallsStartMutationVariables,
  ) => Promise<CallsStartMutationData>;
} {
  return {
    mutationKey: mutationKeyCallsStart(),
    mutationFn: function callsStartMutationFn({
      request,
      options,
    }): Promise<CallsStartMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(callsStart(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
