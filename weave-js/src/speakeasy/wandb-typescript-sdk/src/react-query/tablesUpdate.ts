/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { WandbCore } from "../core.js";
import { tablesUpdate } from "../funcs/tablesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useWandbContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TablesUpdateMutationVariables = {
  request: components.TableUpdateReq;
  options?: RequestOptions;
};

export type TablesUpdateMutationData = components.TableUpdateRes;

/**
 * Table Update
 */
export function useTablesUpdateMutation(
  options?: MutationHookOptions<
    TablesUpdateMutationData,
    Error,
    TablesUpdateMutationVariables
  >,
): UseMutationResult<
  TablesUpdateMutationData,
  Error,
  TablesUpdateMutationVariables
> {
  const client = useWandbContext();
  return useMutation({
    ...buildTablesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyTablesUpdate(): MutationKey {
  return ["wandb", "Tables", "update"];
}

export function buildTablesUpdateMutation(
  client$: WandbCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TablesUpdateMutationVariables,
  ) => Promise<TablesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyTablesUpdate(),
    mutationFn: function tablesUpdateMutationFn({
      request,
      options,
    }): Promise<TablesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(tablesUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
