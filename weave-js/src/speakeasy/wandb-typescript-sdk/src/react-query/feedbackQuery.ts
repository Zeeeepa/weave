/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';
import {WandbCore} from '../core.js';
import {feedbackQuery} from '../funcs/feedbackQuery.js';
import {combineSignals} from '../lib/primitives.js';
import {RequestOptions} from '../lib/sdks.js';
import * as components from '../models/components/index.js';
import {unwrapAsync} from '../types/fp.js';
import {useWandbContext} from './_context.js';
import {QueryHookOptions, SuspenseQueryHookOptions} from './_types.js';

export type FeedbackQueryQueryData = components.FeedbackQueryRes;

/**
 * Feedback Query
 *
 * @remarks
 * Query for feedback.
 */
export function useFeedbackQuery(
  request: components.FeedbackQueryReq,
  options?: QueryHookOptions<FeedbackQueryQueryData>
): UseQueryResult<FeedbackQueryQueryData, Error> {
  const client = useWandbContext();
  return useQuery({
    ...buildFeedbackQueryQuery(client, request, options),
    ...options,
  });
}

/**
 * Feedback Query
 *
 * @remarks
 * Query for feedback.
 */
export function useFeedbackQuerySuspense(
  request: components.FeedbackQueryReq,
  options?: SuspenseQueryHookOptions<FeedbackQueryQueryData>
): UseSuspenseQueryResult<FeedbackQueryQueryData, Error> {
  const client = useWandbContext();
  return useSuspenseQuery({
    ...buildFeedbackQueryQuery(client, request, options),
    ...options,
  });
}

export function prefetchFeedbackQuery(
  queryClient: QueryClient,
  client$: WandbCore,
  request: components.FeedbackQueryReq
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildFeedbackQueryQuery(client$, request),
  });
}

export function setFeedbackQueryData(
  client: QueryClient,
  data: FeedbackQueryQueryData
): FeedbackQueryQueryData | undefined {
  const key = queryKeyFeedbackQuery();

  return client.setQueryData<FeedbackQueryQueryData>(key, data);
}

export function invalidateAllFeedbackQuery(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, 'queryKey' | 'predicate' | 'exact'>
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ['wandb', 'Feedback', 'query'],
  });
}

export function buildFeedbackQueryQuery(
  client$: WandbCore,
  request: components.FeedbackQueryReq,
  options?: RequestOptions
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<FeedbackQueryQueryData>;
} {
  return {
    queryKey: queryKeyFeedbackQuery(),
    queryFn: async function feedbackQueryQueryFn(
      ctx
    ): Promise<FeedbackQueryQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: {...options?.fetchOptions, signal: sig},
      };

      return unwrapAsync(feedbackQuery(client$, request, mergedOptions));
    },
  };
}

export function queryKeyFeedbackQuery(): QueryKey {
  return ['wandb', 'Feedback', 'query'];
}
