/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { WandbCore } from "../core.js";
import { serviceGetServerInfo } from "../funcs/serviceGetServerInfo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useWandbContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type ServiceGetServerInfoQueryData = components.ServerInfoRes;

/**
 * Server Info
 */
export function useServiceGetServerInfo(
  options?: QueryHookOptions<ServiceGetServerInfoQueryData>,
): UseQueryResult<ServiceGetServerInfoQueryData, Error> {
  const client = useWandbContext();
  return useQuery({
    ...buildServiceGetServerInfoQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Server Info
 */
export function useServiceGetServerInfoSuspense(
  options?: SuspenseQueryHookOptions<ServiceGetServerInfoQueryData>,
): UseSuspenseQueryResult<ServiceGetServerInfoQueryData, Error> {
  const client = useWandbContext();
  return useSuspenseQuery({
    ...buildServiceGetServerInfoQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchServiceGetServerInfo(
  queryClient: QueryClient,
  client$: WandbCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildServiceGetServerInfoQuery(
      client$,
    ),
  });
}

export function setServiceGetServerInfoData(
  client: QueryClient,
  data: ServiceGetServerInfoQueryData,
): ServiceGetServerInfoQueryData | undefined {
  const key = queryKeyServiceGetServerInfo();

  return client.setQueryData<ServiceGetServerInfoQueryData>(key, data);
}

export function invalidateAllServiceGetServerInfo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["wandb", "Service", "getServerInfo"],
  });
}

export function buildServiceGetServerInfoQuery(
  client$: WandbCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ServiceGetServerInfoQueryData>;
} {
  return {
    queryKey: queryKeyServiceGetServerInfo(),
    queryFn: async function serviceGetServerInfoQueryFn(
      ctx,
    ): Promise<ServiceGetServerInfoQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(serviceGetServerInfo(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyServiceGetServerInfo(): QueryKey {
  return ["wandb", "Service", "getServerInfo"];
}
