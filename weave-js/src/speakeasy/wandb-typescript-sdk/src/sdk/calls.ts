/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { callsDelete } from "../funcs/callsDelete.js";
import { callsEnd } from "../funcs/callsEnd.js";
import { callsQueryStats } from "../funcs/callsQueryStats.js";
import { callsRead } from "../funcs/callsRead.js";
import { callsStart } from "../funcs/callsStart.js";
import { callsStreamQuery } from "../funcs/callsStreamQuery.js";
import { callsUpdate } from "../funcs/callsUpdate.js";
import { callsUpsertBatch } from "../funcs/callsUpsertBatch.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Calls extends ClientSDK {
  /**
   * Call Start
   */
  async start(
    request: components.CallStartReq,
    options?: RequestOptions,
  ): Promise<components.CallStartRes> {
    return unwrapAsync(callsStart(
      this,
      request,
      options,
    ));
  }

  /**
   * Call End
   */
  async end(
    request: components.CallEndReq,
    options?: RequestOptions,
  ): Promise<components.CallEndRes> {
    return unwrapAsync(callsEnd(
      this,
      request,
      options,
    ));
  }

  /**
   * Call Start Batch
   */
  async upsertBatch(
    request: components.CallCreateBatchReq,
    options?: RequestOptions,
  ): Promise<components.CallCreateBatchRes> {
    return unwrapAsync(callsUpsertBatch(
      this,
      request,
      options,
    ));
  }

  /**
   * Calls Delete
   */
  async delete(
    request: components.CallsDeleteReq,
    options?: RequestOptions,
  ): Promise<components.CallsDeleteRes> {
    return unwrapAsync(callsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Call Update
   */
  async update(
    request: components.CallUpdateReq,
    options?: RequestOptions,
  ): Promise<components.CallUpdateRes> {
    return unwrapAsync(callsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Call Read
   */
  async read(
    request: components.CallReadReq,
    options?: RequestOptions,
  ): Promise<components.CallReadRes> {
    return unwrapAsync(callsRead(
      this,
      request,
      options,
    ));
  }

  /**
   * Calls Query Stats
   */
  async queryStats(
    request: components.CallsQueryStatsReq,
    options?: RequestOptions,
  ): Promise<components.CallsQueryStatsRes> {
    return unwrapAsync(callsQueryStats(
      this,
      request,
      options,
    ));
  }

  /**
   * Calls Query Stream
   */
  async streamQuery(
    request: components.CallsQueryReq,
    options?: RequestOptions,
  ): Promise<any> {
    return unwrapAsync(callsStreamQuery(
      this,
      request,
      options,
    ));
  }
}
