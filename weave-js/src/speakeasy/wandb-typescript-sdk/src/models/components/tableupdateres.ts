/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableUpdateRes = {
  digest: string;
  /**
   * The digests of the rows that were updated
   */
  updatedRowDigests?: Array<string> | undefined;
};

/** @internal */
export const TableUpdateRes$inboundSchema: z.ZodType<
  TableUpdateRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  digest: z.string(),
  updated_row_digests: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "updated_row_digests": "updatedRowDigests",
  });
});

/** @internal */
export type TableUpdateRes$Outbound = {
  digest: string;
  updated_row_digests?: Array<string> | undefined;
};

/** @internal */
export const TableUpdateRes$outboundSchema: z.ZodType<
  TableUpdateRes$Outbound,
  z.ZodTypeDef,
  TableUpdateRes
> = z.object({
  digest: z.string(),
  updatedRowDigests: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    updatedRowDigests: "updated_row_digests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableUpdateRes$ {
  /** @deprecated use `TableUpdateRes$inboundSchema` instead. */
  export const inboundSchema = TableUpdateRes$inboundSchema;
  /** @deprecated use `TableUpdateRes$outboundSchema` instead. */
  export const outboundSchema = TableUpdateRes$outboundSchema;
  /** @deprecated use `TableUpdateRes$Outbound` instead. */
  export type Outbound = TableUpdateRes$Outbound;
}

export function tableUpdateResToJSON(tableUpdateRes: TableUpdateRes): string {
  return JSON.stringify(TableUpdateRes$outboundSchema.parse(tableUpdateRes));
}

export function tableUpdateResFromJSON(
  jsonString: string,
): SafeParseResult<TableUpdateRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableUpdateRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableUpdateRes' from JSON`,
  );
}
