/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CallsFilter,
  CallsFilter$inboundSchema,
  CallsFilter$Outbound,
  CallsFilter$outboundSchema,
} from "./callsfilter.js";
import {
  SortBy,
  SortBy$inboundSchema,
  SortBy$Outbound,
  SortBy$outboundSchema,
} from "./sortby.js";

export type CallsQueryReqQuery = string | number;

export type CallsQueryReq = {
  projectId: string;
  filter?: CallsFilter | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
  sortBy?: Array<SortBy> | null | undefined;
  query?: Array<string | number> | null | undefined;
  /**
   * Beta, subject to change. If true, the response will include any model costs for each call.
   */
  includeCosts?: boolean | null | undefined;
  /**
   * Beta, subject to change. If true, the response will include feedback for each call.
   */
  includeFeedback?: boolean | null | undefined;
  columns?: Array<string> | null | undefined;
  /**
   * Columns to expand, i.e. refs to other objects
   */
  expandColumns?: Array<string> | null | undefined;
};

/** @internal */
export const CallsQueryReqQuery$inboundSchema: z.ZodType<
  CallsQueryReqQuery,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CallsQueryReqQuery$Outbound = string | number;

/** @internal */
export const CallsQueryReqQuery$outboundSchema: z.ZodType<
  CallsQueryReqQuery$Outbound,
  z.ZodTypeDef,
  CallsQueryReqQuery
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallsQueryReqQuery$ {
  /** @deprecated use `CallsQueryReqQuery$inboundSchema` instead. */
  export const inboundSchema = CallsQueryReqQuery$inboundSchema;
  /** @deprecated use `CallsQueryReqQuery$outboundSchema` instead. */
  export const outboundSchema = CallsQueryReqQuery$outboundSchema;
  /** @deprecated use `CallsQueryReqQuery$Outbound` instead. */
  export type Outbound = CallsQueryReqQuery$Outbound;
}

export function callsQueryReqQueryToJSON(
  callsQueryReqQuery: CallsQueryReqQuery,
): string {
  return JSON.stringify(
    CallsQueryReqQuery$outboundSchema.parse(callsQueryReqQuery),
  );
}

export function callsQueryReqQueryFromJSON(
  jsonString: string,
): SafeParseResult<CallsQueryReqQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallsQueryReqQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallsQueryReqQuery' from JSON`,
  );
}

/** @internal */
export const CallsQueryReq$inboundSchema: z.ZodType<
  CallsQueryReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  filter: z.nullable(CallsFilter$inboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sort_by: z.nullable(z.array(SortBy$inboundSchema)).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  include_costs: z.nullable(z.boolean()).optional(),
  include_feedback: z.nullable(z.boolean()).optional(),
  columns: z.nullable(z.array(z.string())).optional(),
  expand_columns: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "sort_by": "sortBy",
    "include_costs": "includeCosts",
    "include_feedback": "includeFeedback",
    "expand_columns": "expandColumns",
  });
});

/** @internal */
export type CallsQueryReq$Outbound = {
  project_id: string;
  filter?: CallsFilter$Outbound | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
  sort_by?: Array<SortBy$Outbound> | null | undefined;
  query?: Array<string | number> | null | undefined;
  include_costs?: boolean | null | undefined;
  include_feedback?: boolean | null | undefined;
  columns?: Array<string> | null | undefined;
  expand_columns?: Array<string> | null | undefined;
};

/** @internal */
export const CallsQueryReq$outboundSchema: z.ZodType<
  CallsQueryReq$Outbound,
  z.ZodTypeDef,
  CallsQueryReq
> = z.object({
  projectId: z.string(),
  filter: z.nullable(CallsFilter$outboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sortBy: z.nullable(z.array(SortBy$outboundSchema)).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  includeCosts: z.nullable(z.boolean()).optional(),
  includeFeedback: z.nullable(z.boolean()).optional(),
  columns: z.nullable(z.array(z.string())).optional(),
  expandColumns: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    sortBy: "sort_by",
    includeCosts: "include_costs",
    includeFeedback: "include_feedback",
    expandColumns: "expand_columns",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallsQueryReq$ {
  /** @deprecated use `CallsQueryReq$inboundSchema` instead. */
  export const inboundSchema = CallsQueryReq$inboundSchema;
  /** @deprecated use `CallsQueryReq$outboundSchema` instead. */
  export const outboundSchema = CallsQueryReq$outboundSchema;
  /** @deprecated use `CallsQueryReq$Outbound` instead. */
  export type Outbound = CallsQueryReq$Outbound;
}

export function callsQueryReqToJSON(callsQueryReq: CallsQueryReq): string {
  return JSON.stringify(CallsQueryReq$outboundSchema.parse(callsQueryReq));
}

export function callsQueryReqFromJSON(
  jsonString: string,
): SafeParseResult<CallsQueryReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallsQueryReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallsQueryReq' from JSON`,
  );
}
