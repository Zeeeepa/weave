/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Rows = {};

export type TableSchemaForInsert = {
  projectId: string;
  rows: Array<Rows>;
};

/** @internal */
export const Rows$inboundSchema: z.ZodType<Rows, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Rows$Outbound = {};

/** @internal */
export const Rows$outboundSchema: z.ZodType<Rows$Outbound, z.ZodTypeDef, Rows> =
  z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rows$ {
  /** @deprecated use `Rows$inboundSchema` instead. */
  export const inboundSchema = Rows$inboundSchema;
  /** @deprecated use `Rows$outboundSchema` instead. */
  export const outboundSchema = Rows$outboundSchema;
  /** @deprecated use `Rows$Outbound` instead. */
  export type Outbound = Rows$Outbound;
}

export function rowsToJSON(rows: Rows): string {
  return JSON.stringify(Rows$outboundSchema.parse(rows));
}

export function rowsFromJSON(
  jsonString: string,
): SafeParseResult<Rows, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rows$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rows' from JSON`,
  );
}

/** @internal */
export const TableSchemaForInsert$inboundSchema: z.ZodType<
  TableSchemaForInsert,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  rows: z.array(z.lazy(() => Rows$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type TableSchemaForInsert$Outbound = {
  project_id: string;
  rows: Array<Rows$Outbound>;
};

/** @internal */
export const TableSchemaForInsert$outboundSchema: z.ZodType<
  TableSchemaForInsert$Outbound,
  z.ZodTypeDef,
  TableSchemaForInsert
> = z.object({
  projectId: z.string(),
  rows: z.array(z.lazy(() => Rows$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableSchemaForInsert$ {
  /** @deprecated use `TableSchemaForInsert$inboundSchema` instead. */
  export const inboundSchema = TableSchemaForInsert$inboundSchema;
  /** @deprecated use `TableSchemaForInsert$outboundSchema` instead. */
  export const outboundSchema = TableSchemaForInsert$outboundSchema;
  /** @deprecated use `TableSchemaForInsert$Outbound` instead. */
  export type Outbound = TableSchemaForInsert$Outbound;
}

export function tableSchemaForInsertToJSON(
  tableSchemaForInsert: TableSchemaForInsert,
): string {
  return JSON.stringify(
    TableSchemaForInsert$outboundSchema.parse(tableSchemaForInsert),
  );
}

export function tableSchemaForInsertFromJSON(
  jsonString: string,
): SafeParseResult<TableSchemaForInsert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableSchemaForInsert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableSchemaForInsert' from JSON`,
  );
}
