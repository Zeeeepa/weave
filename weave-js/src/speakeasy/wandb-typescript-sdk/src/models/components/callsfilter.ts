/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallsFilter = {
  opNames?: Array<string> | null | undefined;
  inputRefs?: Array<string> | null | undefined;
  outputRefs?: Array<string> | null | undefined;
  parentIds?: Array<string> | null | undefined;
  traceIds?: Array<string> | null | undefined;
  callIds?: Array<string> | null | undefined;
  traceRootsOnly?: boolean | null | undefined;
  wbUserIds?: Array<string> | null | undefined;
  wbRunIds?: Array<string> | null | undefined;
};

/** @internal */
export const CallsFilter$inboundSchema: z.ZodType<
  CallsFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  op_names: z.nullable(z.array(z.string())).optional(),
  input_refs: z.nullable(z.array(z.string())).optional(),
  output_refs: z.nullable(z.array(z.string())).optional(),
  parent_ids: z.nullable(z.array(z.string())).optional(),
  trace_ids: z.nullable(z.array(z.string())).optional(),
  call_ids: z.nullable(z.array(z.string())).optional(),
  trace_roots_only: z.nullable(z.boolean()).optional(),
  wb_user_ids: z.nullable(z.array(z.string())).optional(),
  wb_run_ids: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "op_names": "opNames",
    "input_refs": "inputRefs",
    "output_refs": "outputRefs",
    "parent_ids": "parentIds",
    "trace_ids": "traceIds",
    "call_ids": "callIds",
    "trace_roots_only": "traceRootsOnly",
    "wb_user_ids": "wbUserIds",
    "wb_run_ids": "wbRunIds",
  });
});

/** @internal */
export type CallsFilter$Outbound = {
  op_names?: Array<string> | null | undefined;
  input_refs?: Array<string> | null | undefined;
  output_refs?: Array<string> | null | undefined;
  parent_ids?: Array<string> | null | undefined;
  trace_ids?: Array<string> | null | undefined;
  call_ids?: Array<string> | null | undefined;
  trace_roots_only?: boolean | null | undefined;
  wb_user_ids?: Array<string> | null | undefined;
  wb_run_ids?: Array<string> | null | undefined;
};

/** @internal */
export const CallsFilter$outboundSchema: z.ZodType<
  CallsFilter$Outbound,
  z.ZodTypeDef,
  CallsFilter
> = z.object({
  opNames: z.nullable(z.array(z.string())).optional(),
  inputRefs: z.nullable(z.array(z.string())).optional(),
  outputRefs: z.nullable(z.array(z.string())).optional(),
  parentIds: z.nullable(z.array(z.string())).optional(),
  traceIds: z.nullable(z.array(z.string())).optional(),
  callIds: z.nullable(z.array(z.string())).optional(),
  traceRootsOnly: z.nullable(z.boolean()).optional(),
  wbUserIds: z.nullable(z.array(z.string())).optional(),
  wbRunIds: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    opNames: "op_names",
    inputRefs: "input_refs",
    outputRefs: "output_refs",
    parentIds: "parent_ids",
    traceIds: "trace_ids",
    callIds: "call_ids",
    traceRootsOnly: "trace_roots_only",
    wbUserIds: "wb_user_ids",
    wbRunIds: "wb_run_ids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallsFilter$ {
  /** @deprecated use `CallsFilter$inboundSchema` instead. */
  export const inboundSchema = CallsFilter$inboundSchema;
  /** @deprecated use `CallsFilter$outboundSchema` instead. */
  export const outboundSchema = CallsFilter$outboundSchema;
  /** @deprecated use `CallsFilter$Outbound` instead. */
  export type Outbound = CallsFilter$Outbound;
}

export function callsFilterToJSON(callsFilter: CallsFilter): string {
  return JSON.stringify(CallsFilter$outboundSchema.parse(callsFilter));
}

export function callsFilterFromJSON(
  jsonString: string,
): SafeParseResult<CallsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallsFilter' from JSON`,
  );
}
