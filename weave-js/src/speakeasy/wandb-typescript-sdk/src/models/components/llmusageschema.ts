/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LLMUsageSchema = {
  promptTokens?: number | null | undefined;
  inputTokens?: number | null | undefined;
  completionTokens?: number | null | undefined;
  outputTokens?: number | null | undefined;
  requests?: number | null | undefined;
  totalTokens?: number | null | undefined;
};

/** @internal */
export const LLMUsageSchema$inboundSchema: z.ZodType<
  LLMUsageSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  prompt_tokens: z.nullable(z.number().int()).optional(),
  input_tokens: z.nullable(z.number().int()).optional(),
  completion_tokens: z.nullable(z.number().int()).optional(),
  output_tokens: z.nullable(z.number().int()).optional(),
  requests: z.nullable(z.number().int()).optional(),
  total_tokens: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "prompt_tokens": "promptTokens",
    "input_tokens": "inputTokens",
    "completion_tokens": "completionTokens",
    "output_tokens": "outputTokens",
    "total_tokens": "totalTokens",
  });
});

/** @internal */
export type LLMUsageSchema$Outbound = {
  prompt_tokens?: number | null | undefined;
  input_tokens?: number | null | undefined;
  completion_tokens?: number | null | undefined;
  output_tokens?: number | null | undefined;
  requests?: number | null | undefined;
  total_tokens?: number | null | undefined;
};

/** @internal */
export const LLMUsageSchema$outboundSchema: z.ZodType<
  LLMUsageSchema$Outbound,
  z.ZodTypeDef,
  LLMUsageSchema
> = z.object({
  promptTokens: z.nullable(z.number().int()).optional(),
  inputTokens: z.nullable(z.number().int()).optional(),
  completionTokens: z.nullable(z.number().int()).optional(),
  outputTokens: z.nullable(z.number().int()).optional(),
  requests: z.nullable(z.number().int()).optional(),
  totalTokens: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    promptTokens: "prompt_tokens",
    inputTokens: "input_tokens",
    completionTokens: "completion_tokens",
    outputTokens: "output_tokens",
    totalTokens: "total_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LLMUsageSchema$ {
  /** @deprecated use `LLMUsageSchema$inboundSchema` instead. */
  export const inboundSchema = LLMUsageSchema$inboundSchema;
  /** @deprecated use `LLMUsageSchema$outboundSchema` instead. */
  export const outboundSchema = LLMUsageSchema$outboundSchema;
  /** @deprecated use `LLMUsageSchema$Outbound` instead. */
  export type Outbound = LLMUsageSchema$Outbound;
}

export function llmUsageSchemaToJSON(llmUsageSchema: LLMUsageSchema): string {
  return JSON.stringify(LLMUsageSchema$outboundSchema.parse(llmUsageSchema));
}

export function llmUsageSchemaFromJSON(
  jsonString: string,
): SafeParseResult<LLMUsageSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LLMUsageSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LLMUsageSchema' from JSON`,
  );
}
