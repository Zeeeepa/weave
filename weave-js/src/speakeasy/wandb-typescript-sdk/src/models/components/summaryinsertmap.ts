/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  LLMUsageSchema,
  LLMUsageSchema$inboundSchema,
  LLMUsageSchema$Outbound,
  LLMUsageSchema$outboundSchema,
} from "./llmusageschema.js";

export type SummaryInsertMap = {
  usage?: { [k: string]: LLMUsageSchema } | undefined;
  additionalProperties: { [k: string]: any };
};

/** @internal */
export const SummaryInsertMap$inboundSchema: z.ZodType<
  SummaryInsertMap,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    usage: z.record(LLMUsageSchema$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
);

/** @internal */
export type SummaryInsertMap$Outbound = {
  usage?: { [k: string]: LLMUsageSchema$Outbound } | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const SummaryInsertMap$outboundSchema: z.ZodType<
  SummaryInsertMap$Outbound,
  z.ZodTypeDef,
  SummaryInsertMap
> = z.object({
  usage: z.record(LLMUsageSchema$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SummaryInsertMap$ {
  /** @deprecated use `SummaryInsertMap$inboundSchema` instead. */
  export const inboundSchema = SummaryInsertMap$inboundSchema;
  /** @deprecated use `SummaryInsertMap$outboundSchema` instead. */
  export const outboundSchema = SummaryInsertMap$outboundSchema;
  /** @deprecated use `SummaryInsertMap$Outbound` instead. */
  export type Outbound = SummaryInsertMap$Outbound;
}

export function summaryInsertMapToJSON(
  summaryInsertMap: SummaryInsertMap,
): string {
  return JSON.stringify(
    SummaryInsertMap$outboundSchema.parse(summaryInsertMap),
  );
}

export function summaryInsertMapFromJSON(
  jsonString: string,
): SafeParseResult<SummaryInsertMap, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SummaryInsertMap$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SummaryInsertMap' from JSON`,
  );
}
