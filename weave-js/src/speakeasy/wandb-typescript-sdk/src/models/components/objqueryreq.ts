/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ObjectVersionFilter,
  ObjectVersionFilter$inboundSchema,
  ObjectVersionFilter$Outbound,
  ObjectVersionFilter$outboundSchema,
} from "./objectversionfilter.js";
import {
  SortBy,
  SortBy$inboundSchema,
  SortBy$Outbound,
  SortBy$outboundSchema,
} from "./sortby.js";

export type ObjQueryReq = {
  /**
   * The ID of the project to query
   */
  projectId: string;
  /**
   * Filter criteria for the query. See `ObjectVersionFilter`
   */
  filter?: ObjectVersionFilter | null | undefined;
  /**
   * Maximum number of results to return
   */
  limit?: number | null | undefined;
  /**
   * Number of results to skip before returning
   */
  offset?: number | null | undefined;
  /**
   * Sorting criteria for the query results. Currently only supports 'object_id' and 'created_at'.
   */
  sortBy?: Array<SortBy> | null | undefined;
  /**
   * If true, the `val` column is not read from the database and is empty.All other fields are returned.
   */
  metadataOnly?: boolean | null | undefined;
};

/** @internal */
export const ObjQueryReq$inboundSchema: z.ZodType<
  ObjQueryReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  filter: z.nullable(ObjectVersionFilter$inboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sort_by: z.nullable(z.array(SortBy$inboundSchema)).optional(),
  metadata_only: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "sort_by": "sortBy",
    "metadata_only": "metadataOnly",
  });
});

/** @internal */
export type ObjQueryReq$Outbound = {
  project_id: string;
  filter?: ObjectVersionFilter$Outbound | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
  sort_by?: Array<SortBy$Outbound> | null | undefined;
  metadata_only?: boolean | null | undefined;
};

/** @internal */
export const ObjQueryReq$outboundSchema: z.ZodType<
  ObjQueryReq$Outbound,
  z.ZodTypeDef,
  ObjQueryReq
> = z.object({
  projectId: z.string(),
  filter: z.nullable(ObjectVersionFilter$outboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sortBy: z.nullable(z.array(SortBy$outboundSchema)).optional(),
  metadataOnly: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    sortBy: "sort_by",
    metadataOnly: "metadata_only",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjQueryReq$ {
  /** @deprecated use `ObjQueryReq$inboundSchema` instead. */
  export const inboundSchema = ObjQueryReq$inboundSchema;
  /** @deprecated use `ObjQueryReq$outboundSchema` instead. */
  export const outboundSchema = ObjQueryReq$outboundSchema;
  /** @deprecated use `ObjQueryReq$Outbound` instead. */
  export type Outbound = ObjQueryReq$Outbound;
}

export function objQueryReqToJSON(objQueryReq: ObjQueryReq): string {
  return JSON.stringify(ObjQueryReq$outboundSchema.parse(objQueryReq));
}

export function objQueryReqFromJSON(
  jsonString: string,
): SafeParseResult<ObjQueryReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjQueryReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjQueryReq' from JSON`,
  );
}
