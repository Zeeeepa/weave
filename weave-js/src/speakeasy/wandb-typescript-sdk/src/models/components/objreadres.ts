/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ObjSchema,
  ObjSchema$inboundSchema,
  ObjSchema$Outbound,
  ObjSchema$outboundSchema,
} from "./objschema.js";

export type ObjReadRes = {
  obj: ObjSchema;
};

/** @internal */
export const ObjReadRes$inboundSchema: z.ZodType<
  ObjReadRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  obj: ObjSchema$inboundSchema,
});

/** @internal */
export type ObjReadRes$Outbound = {
  obj: ObjSchema$Outbound;
};

/** @internal */
export const ObjReadRes$outboundSchema: z.ZodType<
  ObjReadRes$Outbound,
  z.ZodTypeDef,
  ObjReadRes
> = z.object({
  obj: ObjSchema$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjReadRes$ {
  /** @deprecated use `ObjReadRes$inboundSchema` instead. */
  export const inboundSchema = ObjReadRes$inboundSchema;
  /** @deprecated use `ObjReadRes$outboundSchema` instead. */
  export const outboundSchema = ObjReadRes$outboundSchema;
  /** @deprecated use `ObjReadRes$Outbound` instead. */
  export type Outbound = ObjReadRes$Outbound;
}

export function objReadResToJSON(objReadRes: ObjReadRes): string {
  return JSON.stringify(ObjReadRes$outboundSchema.parse(objReadRes));
}

export function objReadResFromJSON(
  jsonString: string,
): SafeParseResult<ObjReadRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjReadRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjReadRes' from JSON`,
  );
}
