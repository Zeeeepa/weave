/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ObjSchema,
  ObjSchema$inboundSchema,
  ObjSchema$Outbound,
  ObjSchema$outboundSchema,
} from "./objschema.js";

export type ObjQueryRes = {
  objs: Array<ObjSchema>;
};

/** @internal */
export const ObjQueryRes$inboundSchema: z.ZodType<
  ObjQueryRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  objs: z.array(ObjSchema$inboundSchema),
});

/** @internal */
export type ObjQueryRes$Outbound = {
  objs: Array<ObjSchema$Outbound>;
};

/** @internal */
export const ObjQueryRes$outboundSchema: z.ZodType<
  ObjQueryRes$Outbound,
  z.ZodTypeDef,
  ObjQueryRes
> = z.object({
  objs: z.array(ObjSchema$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjQueryRes$ {
  /** @deprecated use `ObjQueryRes$inboundSchema` instead. */
  export const inboundSchema = ObjQueryRes$inboundSchema;
  /** @deprecated use `ObjQueryRes$outboundSchema` instead. */
  export const outboundSchema = ObjQueryRes$outboundSchema;
  /** @deprecated use `ObjQueryRes$Outbound` instead. */
  export type Outbound = ObjQueryRes$Outbound;
}

export function objQueryResToJSON(objQueryRes: ObjQueryRes): string {
  return JSON.stringify(ObjQueryRes$outboundSchema.parse(objQueryRes));
}

export function objQueryResFromJSON(
  jsonString: string,
): SafeParseResult<ObjQueryRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjQueryRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjQueryRes' from JSON`,
  );
}
