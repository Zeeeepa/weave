/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableCreateRes = {
  digest: string;
  /**
   * The digests of the rows that were created
   */
  rowDigests?: Array<string> | undefined;
};

/** @internal */
export const TableCreateRes$inboundSchema: z.ZodType<
  TableCreateRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  digest: z.string(),
  row_digests: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "row_digests": "rowDigests",
  });
});

/** @internal */
export type TableCreateRes$Outbound = {
  digest: string;
  row_digests?: Array<string> | undefined;
};

/** @internal */
export const TableCreateRes$outboundSchema: z.ZodType<
  TableCreateRes$Outbound,
  z.ZodTypeDef,
  TableCreateRes
> = z.object({
  digest: z.string(),
  rowDigests: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    rowDigests: "row_digests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableCreateRes$ {
  /** @deprecated use `TableCreateRes$inboundSchema` instead. */
  export const inboundSchema = TableCreateRes$inboundSchema;
  /** @deprecated use `TableCreateRes$outboundSchema` instead. */
  export const outboundSchema = TableCreateRes$outboundSchema;
  /** @deprecated use `TableCreateRes$Outbound` instead. */
  export type Outbound = TableCreateRes$Outbound;
}

export function tableCreateResToJSON(tableCreateRes: TableCreateRes): string {
  return JSON.stringify(TableCreateRes$outboundSchema.parse(tableCreateRes));
}

export function tableCreateResFromJSON(
  jsonString: string,
): SafeParseResult<TableCreateRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableCreateRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableCreateRes' from JSON`,
  );
}
