/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CallEndRes,
  CallEndRes$inboundSchema,
  CallEndRes$Outbound,
  CallEndRes$outboundSchema,
} from "./callendres.js";
import {
  CallStartRes,
  CallStartRes$inboundSchema,
  CallStartRes$Outbound,
  CallStartRes$outboundSchema,
} from "./callstartres.js";

export type Res = CallEndRes | CallStartRes;

export type CallCreateBatchRes = {
  res: Array<CallEndRes | CallStartRes>;
};

/** @internal */
export const Res$inboundSchema: z.ZodType<Res, z.ZodTypeDef, unknown> = z.union(
  [CallEndRes$inboundSchema, CallStartRes$inboundSchema],
);

/** @internal */
export type Res$Outbound = CallEndRes$Outbound | CallStartRes$Outbound;

/** @internal */
export const Res$outboundSchema: z.ZodType<Res$Outbound, z.ZodTypeDef, Res> = z
  .union([CallEndRes$outboundSchema, CallStartRes$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Res$ {
  /** @deprecated use `Res$inboundSchema` instead. */
  export const inboundSchema = Res$inboundSchema;
  /** @deprecated use `Res$outboundSchema` instead. */
  export const outboundSchema = Res$outboundSchema;
  /** @deprecated use `Res$Outbound` instead. */
  export type Outbound = Res$Outbound;
}

export function resToJSON(res: Res): string {
  return JSON.stringify(Res$outboundSchema.parse(res));
}

export function resFromJSON(
  jsonString: string,
): SafeParseResult<Res, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Res$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Res' from JSON`,
  );
}

/** @internal */
export const CallCreateBatchRes$inboundSchema: z.ZodType<
  CallCreateBatchRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  res: z.array(z.union([CallEndRes$inboundSchema, CallStartRes$inboundSchema])),
});

/** @internal */
export type CallCreateBatchRes$Outbound = {
  res: Array<CallEndRes$Outbound | CallStartRes$Outbound>;
};

/** @internal */
export const CallCreateBatchRes$outboundSchema: z.ZodType<
  CallCreateBatchRes$Outbound,
  z.ZodTypeDef,
  CallCreateBatchRes
> = z.object({
  res: z.array(
    z.union([CallEndRes$outboundSchema, CallStartRes$outboundSchema]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallCreateBatchRes$ {
  /** @deprecated use `CallCreateBatchRes$inboundSchema` instead. */
  export const inboundSchema = CallCreateBatchRes$inboundSchema;
  /** @deprecated use `CallCreateBatchRes$outboundSchema` instead. */
  export const outboundSchema = CallCreateBatchRes$outboundSchema;
  /** @deprecated use `CallCreateBatchRes$Outbound` instead. */
  export type Outbound = CallCreateBatchRes$Outbound;
}

export function callCreateBatchResToJSON(
  callCreateBatchRes: CallCreateBatchRes,
): string {
  return JSON.stringify(
    CallCreateBatchRes$outboundSchema.parse(callCreateBatchRes),
  );
}

export function callCreateBatchResFromJSON(
  jsonString: string,
): SafeParseResult<CallCreateBatchRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallCreateBatchRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallCreateBatchRes' from JSON`,
  );
}
