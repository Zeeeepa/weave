/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CostPurgeReqQuery = string | number;

export type CostPurgeReq = {
  projectId: string;
  query: Array<string | number>;
};

/** @internal */
export const CostPurgeReqQuery$inboundSchema: z.ZodType<
  CostPurgeReqQuery,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CostPurgeReqQuery$Outbound = string | number;

/** @internal */
export const CostPurgeReqQuery$outboundSchema: z.ZodType<
  CostPurgeReqQuery$Outbound,
  z.ZodTypeDef,
  CostPurgeReqQuery
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostPurgeReqQuery$ {
  /** @deprecated use `CostPurgeReqQuery$inboundSchema` instead. */
  export const inboundSchema = CostPurgeReqQuery$inboundSchema;
  /** @deprecated use `CostPurgeReqQuery$outboundSchema` instead. */
  export const outboundSchema = CostPurgeReqQuery$outboundSchema;
  /** @deprecated use `CostPurgeReqQuery$Outbound` instead. */
  export type Outbound = CostPurgeReqQuery$Outbound;
}

export function costPurgeReqQueryToJSON(
  costPurgeReqQuery: CostPurgeReqQuery,
): string {
  return JSON.stringify(
    CostPurgeReqQuery$outboundSchema.parse(costPurgeReqQuery),
  );
}

export function costPurgeReqQueryFromJSON(
  jsonString: string,
): SafeParseResult<CostPurgeReqQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostPurgeReqQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostPurgeReqQuery' from JSON`,
  );
}

/** @internal */
export const CostPurgeReq$inboundSchema: z.ZodType<
  CostPurgeReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  query: z.array(z.union([z.string(), z.number()])),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type CostPurgeReq$Outbound = {
  project_id: string;
  query: Array<string | number>;
};

/** @internal */
export const CostPurgeReq$outboundSchema: z.ZodType<
  CostPurgeReq$Outbound,
  z.ZodTypeDef,
  CostPurgeReq
> = z.object({
  projectId: z.string(),
  query: z.array(z.union([z.string(), z.number()])),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostPurgeReq$ {
  /** @deprecated use `CostPurgeReq$inboundSchema` instead. */
  export const inboundSchema = CostPurgeReq$inboundSchema;
  /** @deprecated use `CostPurgeReq$outboundSchema` instead. */
  export const outboundSchema = CostPurgeReq$outboundSchema;
  /** @deprecated use `CostPurgeReq$Outbound` instead. */
  export type Outbound = CostPurgeReq$Outbound;
}

export function costPurgeReqToJSON(costPurgeReq: CostPurgeReq): string {
  return JSON.stringify(CostPurgeReq$outboundSchema.parse(costPurgeReq));
}

export function costPurgeReqFromJSON(
  jsonString: string,
): SafeParseResult<CostPurgeReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostPurgeReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostPurgeReq' from JSON`,
  );
}
