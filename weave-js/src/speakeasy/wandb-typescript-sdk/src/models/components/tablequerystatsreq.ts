/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableQueryStatsReq = {
  /**
   * The ID of the project
   */
  projectId: string;
  /**
   * The digest of the table to query
   */
  digest: string;
};

/** @internal */
export const TableQueryStatsReq$inboundSchema: z.ZodType<
  TableQueryStatsReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  digest: z.string(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type TableQueryStatsReq$Outbound = {
  project_id: string;
  digest: string;
};

/** @internal */
export const TableQueryStatsReq$outboundSchema: z.ZodType<
  TableQueryStatsReq$Outbound,
  z.ZodTypeDef,
  TableQueryStatsReq
> = z.object({
  projectId: z.string(),
  digest: z.string(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableQueryStatsReq$ {
  /** @deprecated use `TableQueryStatsReq$inboundSchema` instead. */
  export const inboundSchema = TableQueryStatsReq$inboundSchema;
  /** @deprecated use `TableQueryStatsReq$outboundSchema` instead. */
  export const outboundSchema = TableQueryStatsReq$outboundSchema;
  /** @deprecated use `TableQueryStatsReq$Outbound` instead. */
  export type Outbound = TableQueryStatsReq$Outbound;
}

export function tableQueryStatsReqToJSON(
  tableQueryStatsReq: TableQueryStatsReq,
): string {
  return JSON.stringify(
    TableQueryStatsReq$outboundSchema.parse(tableQueryStatsReq),
  );
}

export function tableQueryStatsReqFromJSON(
  jsonString: string,
): SafeParseResult<TableQueryStatsReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableQueryStatsReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableQueryStatsReq' from JSON`,
  );
}
