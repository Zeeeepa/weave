/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Attributes = {};

export type Inputs = {};

export type StartedCallSchemaForInsert = {
  projectId: string;
  id?: string | null | undefined;
  opName: string;
  displayName?: string | null | undefined;
  traceId?: string | null | undefined;
  parentId?: string | null | undefined;
  startedAt: Date;
  attributes: Attributes;
  inputs: Inputs;
  /**
   * Do not set directly. Server will automatically populate this field.
   */
  wbUserId?: string | null | undefined;
  wbRunId?: string | null | undefined;
};

/** @internal */
export const Attributes$inboundSchema: z.ZodType<
  Attributes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Attributes$Outbound = {};

/** @internal */
export const Attributes$outboundSchema: z.ZodType<
  Attributes$Outbound,
  z.ZodTypeDef,
  Attributes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Attributes$ {
  /** @deprecated use `Attributes$inboundSchema` instead. */
  export const inboundSchema = Attributes$inboundSchema;
  /** @deprecated use `Attributes$outboundSchema` instead. */
  export const outboundSchema = Attributes$outboundSchema;
  /** @deprecated use `Attributes$Outbound` instead. */
  export type Outbound = Attributes$Outbound;
}

export function attributesToJSON(attributes: Attributes): string {
  return JSON.stringify(Attributes$outboundSchema.parse(attributes));
}

export function attributesFromJSON(
  jsonString: string,
): SafeParseResult<Attributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Attributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Attributes' from JSON`,
  );
}

/** @internal */
export const Inputs$inboundSchema: z.ZodType<Inputs, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Inputs$Outbound = {};

/** @internal */
export const Inputs$outboundSchema: z.ZodType<
  Inputs$Outbound,
  z.ZodTypeDef,
  Inputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Inputs$ {
  /** @deprecated use `Inputs$inboundSchema` instead. */
  export const inboundSchema = Inputs$inboundSchema;
  /** @deprecated use `Inputs$outboundSchema` instead. */
  export const outboundSchema = Inputs$outboundSchema;
  /** @deprecated use `Inputs$Outbound` instead. */
  export type Outbound = Inputs$Outbound;
}

export function inputsToJSON(inputs: Inputs): string {
  return JSON.stringify(Inputs$outboundSchema.parse(inputs));
}

export function inputsFromJSON(
  jsonString: string,
): SafeParseResult<Inputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Inputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Inputs' from JSON`,
  );
}

/** @internal */
export const StartedCallSchemaForInsert$inboundSchema: z.ZodType<
  StartedCallSchemaForInsert,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  id: z.nullable(z.string()).optional(),
  op_name: z.string(),
  display_name: z.nullable(z.string()).optional(),
  trace_id: z.nullable(z.string()).optional(),
  parent_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  attributes: z.lazy(() => Attributes$inboundSchema),
  inputs: z.lazy(() => Inputs$inboundSchema),
  wb_user_id: z.nullable(z.string()).optional(),
  wb_run_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "op_name": "opName",
    "display_name": "displayName",
    "trace_id": "traceId",
    "parent_id": "parentId",
    "started_at": "startedAt",
    "wb_user_id": "wbUserId",
    "wb_run_id": "wbRunId",
  });
});

/** @internal */
export type StartedCallSchemaForInsert$Outbound = {
  project_id: string;
  id?: string | null | undefined;
  op_name: string;
  display_name?: string | null | undefined;
  trace_id?: string | null | undefined;
  parent_id?: string | null | undefined;
  started_at: string;
  attributes: Attributes$Outbound;
  inputs: Inputs$Outbound;
  wb_user_id?: string | null | undefined;
  wb_run_id?: string | null | undefined;
};

/** @internal */
export const StartedCallSchemaForInsert$outboundSchema: z.ZodType<
  StartedCallSchemaForInsert$Outbound,
  z.ZodTypeDef,
  StartedCallSchemaForInsert
> = z.object({
  projectId: z.string(),
  id: z.nullable(z.string()).optional(),
  opName: z.string(),
  displayName: z.nullable(z.string()).optional(),
  traceId: z.nullable(z.string()).optional(),
  parentId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  attributes: z.lazy(() => Attributes$outboundSchema),
  inputs: z.lazy(() => Inputs$outboundSchema),
  wbUserId: z.nullable(z.string()).optional(),
  wbRunId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    opName: "op_name",
    displayName: "display_name",
    traceId: "trace_id",
    parentId: "parent_id",
    startedAt: "started_at",
    wbUserId: "wb_user_id",
    wbRunId: "wb_run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StartedCallSchemaForInsert$ {
  /** @deprecated use `StartedCallSchemaForInsert$inboundSchema` instead. */
  export const inboundSchema = StartedCallSchemaForInsert$inboundSchema;
  /** @deprecated use `StartedCallSchemaForInsert$outboundSchema` instead. */
  export const outboundSchema = StartedCallSchemaForInsert$outboundSchema;
  /** @deprecated use `StartedCallSchemaForInsert$Outbound` instead. */
  export type Outbound = StartedCallSchemaForInsert$Outbound;
}

export function startedCallSchemaForInsertToJSON(
  startedCallSchemaForInsert: StartedCallSchemaForInsert,
): string {
  return JSON.stringify(
    StartedCallSchemaForInsert$outboundSchema.parse(startedCallSchemaForInsert),
  );
}

export function startedCallSchemaForInsertFromJSON(
  jsonString: string,
): SafeParseResult<StartedCallSchemaForInsert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StartedCallSchemaForInsert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StartedCallSchemaForInsert' from JSON`,
  );
}
