/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CostCreateInput,
  CostCreateInput$inboundSchema,
  CostCreateInput$Outbound,
  CostCreateInput$outboundSchema,
} from "./costcreateinput.js";

export type CostCreateReq = {
  projectId: string;
  costs: { [k: string]: CostCreateInput };
  /**
   * Do not set directly. Server will automatically populate this field.
   */
  wbUserId?: string | null | undefined;
};

/** @internal */
export const CostCreateReq$inboundSchema: z.ZodType<
  CostCreateReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  costs: z.record(CostCreateInput$inboundSchema),
  wb_user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "wb_user_id": "wbUserId",
  });
});

/** @internal */
export type CostCreateReq$Outbound = {
  project_id: string;
  costs: { [k: string]: CostCreateInput$Outbound };
  wb_user_id?: string | null | undefined;
};

/** @internal */
export const CostCreateReq$outboundSchema: z.ZodType<
  CostCreateReq$Outbound,
  z.ZodTypeDef,
  CostCreateReq
> = z.object({
  projectId: z.string(),
  costs: z.record(CostCreateInput$outboundSchema),
  wbUserId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    wbUserId: "wb_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostCreateReq$ {
  /** @deprecated use `CostCreateReq$inboundSchema` instead. */
  export const inboundSchema = CostCreateReq$inboundSchema;
  /** @deprecated use `CostCreateReq$outboundSchema` instead. */
  export const outboundSchema = CostCreateReq$outboundSchema;
  /** @deprecated use `CostCreateReq$Outbound` instead. */
  export type Outbound = CostCreateReq$Outbound;
}

export function costCreateReqToJSON(costCreateReq: CostCreateReq): string {
  return JSON.stringify(CostCreateReq$outboundSchema.parse(costCreateReq));
}

export function costCreateReqFromJSON(
  jsonString: string,
): SafeParseResult<CostCreateReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostCreateReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostCreateReq' from JSON`,
  );
}
