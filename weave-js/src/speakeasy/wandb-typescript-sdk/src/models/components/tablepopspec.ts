/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TablePopSpecPayload,
  TablePopSpecPayload$inboundSchema,
  TablePopSpecPayload$Outbound,
  TablePopSpecPayload$outboundSchema,
} from "./tablepopspecpayload.js";

export type TablePopSpec = {
  pop: TablePopSpecPayload;
};

/** @internal */
export const TablePopSpec$inboundSchema: z.ZodType<
  TablePopSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  pop: TablePopSpecPayload$inboundSchema,
});

/** @internal */
export type TablePopSpec$Outbound = {
  pop: TablePopSpecPayload$Outbound;
};

/** @internal */
export const TablePopSpec$outboundSchema: z.ZodType<
  TablePopSpec$Outbound,
  z.ZodTypeDef,
  TablePopSpec
> = z.object({
  pop: TablePopSpecPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TablePopSpec$ {
  /** @deprecated use `TablePopSpec$inboundSchema` instead. */
  export const inboundSchema = TablePopSpec$inboundSchema;
  /** @deprecated use `TablePopSpec$outboundSchema` instead. */
  export const outboundSchema = TablePopSpec$outboundSchema;
  /** @deprecated use `TablePopSpec$Outbound` instead. */
  export type Outbound = TablePopSpec$Outbound;
}

export function tablePopSpecToJSON(tablePopSpec: TablePopSpec): string {
  return JSON.stringify(TablePopSpec$outboundSchema.parse(tablePopSpec));
}

export function tablePopSpecFromJSON(
  jsonString: string,
): SafeParseResult<TablePopSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TablePopSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TablePopSpec' from JSON`,
  );
}
