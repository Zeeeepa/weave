/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TableAppendSpec,
  TableAppendSpec$inboundSchema,
  TableAppendSpec$Outbound,
  TableAppendSpec$outboundSchema,
} from "./tableappendspec.js";
import {
  TableInsertSpec,
  TableInsertSpec$inboundSchema,
  TableInsertSpec$Outbound,
  TableInsertSpec$outboundSchema,
} from "./tableinsertspec.js";
import {
  TablePopSpec,
  TablePopSpec$inboundSchema,
  TablePopSpec$Outbound,
  TablePopSpec$outboundSchema,
} from "./tablepopspec.js";

export type Updates = TableAppendSpec | TablePopSpec | TableInsertSpec;

export type TableUpdateReq = {
  projectId: string;
  baseDigest: string;
  updates: Array<TableAppendSpec | TablePopSpec | TableInsertSpec>;
};

/** @internal */
export const Updates$inboundSchema: z.ZodType<Updates, z.ZodTypeDef, unknown> =
  z.union([
    TableAppendSpec$inboundSchema,
    TablePopSpec$inboundSchema,
    TableInsertSpec$inboundSchema,
  ]);

/** @internal */
export type Updates$Outbound =
  | TableAppendSpec$Outbound
  | TablePopSpec$Outbound
  | TableInsertSpec$Outbound;

/** @internal */
export const Updates$outboundSchema: z.ZodType<
  Updates$Outbound,
  z.ZodTypeDef,
  Updates
> = z.union([
  TableAppendSpec$outboundSchema,
  TablePopSpec$outboundSchema,
  TableInsertSpec$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Updates$ {
  /** @deprecated use `Updates$inboundSchema` instead. */
  export const inboundSchema = Updates$inboundSchema;
  /** @deprecated use `Updates$outboundSchema` instead. */
  export const outboundSchema = Updates$outboundSchema;
  /** @deprecated use `Updates$Outbound` instead. */
  export type Outbound = Updates$Outbound;
}

export function updatesToJSON(updates: Updates): string {
  return JSON.stringify(Updates$outboundSchema.parse(updates));
}

export function updatesFromJSON(
  jsonString: string,
): SafeParseResult<Updates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Updates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Updates' from JSON`,
  );
}

/** @internal */
export const TableUpdateReq$inboundSchema: z.ZodType<
  TableUpdateReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  base_digest: z.string(),
  updates: z.array(
    z.union([
      TableAppendSpec$inboundSchema,
      TablePopSpec$inboundSchema,
      TableInsertSpec$inboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "base_digest": "baseDigest",
  });
});

/** @internal */
export type TableUpdateReq$Outbound = {
  project_id: string;
  base_digest: string;
  updates: Array<
    TableAppendSpec$Outbound | TablePopSpec$Outbound | TableInsertSpec$Outbound
  >;
};

/** @internal */
export const TableUpdateReq$outboundSchema: z.ZodType<
  TableUpdateReq$Outbound,
  z.ZodTypeDef,
  TableUpdateReq
> = z.object({
  projectId: z.string(),
  baseDigest: z.string(),
  updates: z.array(
    z.union([
      TableAppendSpec$outboundSchema,
      TablePopSpec$outboundSchema,
      TableInsertSpec$outboundSchema,
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    baseDigest: "base_digest",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableUpdateReq$ {
  /** @deprecated use `TableUpdateReq$inboundSchema` instead. */
  export const inboundSchema = TableUpdateReq$inboundSchema;
  /** @deprecated use `TableUpdateReq$outboundSchema` instead. */
  export const outboundSchema = TableUpdateReq$outboundSchema;
  /** @deprecated use `TableUpdateReq$Outbound` instead. */
  export type Outbound = TableUpdateReq$Outbound;
}

export function tableUpdateReqToJSON(tableUpdateReq: TableUpdateReq): string {
  return JSON.stringify(TableUpdateReq$outboundSchema.parse(tableUpdateReq));
}

export function tableUpdateReqFromJSON(
  jsonString: string,
): SafeParseResult<TableUpdateReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableUpdateReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableUpdateReq' from JSON`,
  );
}
