/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SortBy,
  SortBy$inboundSchema,
  SortBy$Outbound,
  SortBy$outboundSchema,
} from "./sortby.js";

export type CostQueryReqQuery = string | number;

export type CostQueryReq = {
  projectId: string;
  fields?: Array<string> | null | undefined;
  query?: Array<string | number> | null | undefined;
  sortBy?: Array<SortBy> | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const CostQueryReqQuery$inboundSchema: z.ZodType<
  CostQueryReqQuery,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type CostQueryReqQuery$Outbound = string | number;

/** @internal */
export const CostQueryReqQuery$outboundSchema: z.ZodType<
  CostQueryReqQuery$Outbound,
  z.ZodTypeDef,
  CostQueryReqQuery
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostQueryReqQuery$ {
  /** @deprecated use `CostQueryReqQuery$inboundSchema` instead. */
  export const inboundSchema = CostQueryReqQuery$inboundSchema;
  /** @deprecated use `CostQueryReqQuery$outboundSchema` instead. */
  export const outboundSchema = CostQueryReqQuery$outboundSchema;
  /** @deprecated use `CostQueryReqQuery$Outbound` instead. */
  export type Outbound = CostQueryReqQuery$Outbound;
}

export function costQueryReqQueryToJSON(
  costQueryReqQuery: CostQueryReqQuery,
): string {
  return JSON.stringify(
    CostQueryReqQuery$outboundSchema.parse(costQueryReqQuery),
  );
}

export function costQueryReqQueryFromJSON(
  jsonString: string,
): SafeParseResult<CostQueryReqQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostQueryReqQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostQueryReqQuery' from JSON`,
  );
}

/** @internal */
export const CostQueryReq$inboundSchema: z.ZodType<
  CostQueryReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  fields: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  sort_by: z.nullable(z.array(SortBy$inboundSchema)).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "sort_by": "sortBy",
  });
});

/** @internal */
export type CostQueryReq$Outbound = {
  project_id: string;
  fields?: Array<string> | null | undefined;
  query?: Array<string | number> | null | undefined;
  sort_by?: Array<SortBy$Outbound> | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const CostQueryReq$outboundSchema: z.ZodType<
  CostQueryReq$Outbound,
  z.ZodTypeDef,
  CostQueryReq
> = z.object({
  projectId: z.string(),
  fields: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  sortBy: z.nullable(z.array(SortBy$outboundSchema)).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostQueryReq$ {
  /** @deprecated use `CostQueryReq$inboundSchema` instead. */
  export const inboundSchema = CostQueryReq$inboundSchema;
  /** @deprecated use `CostQueryReq$outboundSchema` instead. */
  export const outboundSchema = CostQueryReq$outboundSchema;
  /** @deprecated use `CostQueryReq$Outbound` instead. */
  export type Outbound = CostQueryReq$Outbound;
}

export function costQueryReqToJSON(costQueryReq: CostQueryReq): string {
  return JSON.stringify(CostQueryReq$outboundSchema.parse(costQueryReq));
}

export function costQueryReqFromJSON(
  jsonString: string,
): SafeParseResult<CostQueryReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostQueryReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostQueryReq' from JSON`,
  );
}
