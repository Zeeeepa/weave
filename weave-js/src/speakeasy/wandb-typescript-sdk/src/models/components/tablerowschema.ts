/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableRowSchema = {
  digest: string;
  val?: any | undefined;
};

/** @internal */
export const TableRowSchema$inboundSchema: z.ZodType<
  TableRowSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  digest: z.string(),
  val: z.any().optional(),
});

/** @internal */
export type TableRowSchema$Outbound = {
  digest: string;
  val?: any | undefined;
};

/** @internal */
export const TableRowSchema$outboundSchema: z.ZodType<
  TableRowSchema$Outbound,
  z.ZodTypeDef,
  TableRowSchema
> = z.object({
  digest: z.string(),
  val: z.any().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableRowSchema$ {
  /** @deprecated use `TableRowSchema$inboundSchema` instead. */
  export const inboundSchema = TableRowSchema$inboundSchema;
  /** @deprecated use `TableRowSchema$outboundSchema` instead. */
  export const outboundSchema = TableRowSchema$outboundSchema;
  /** @deprecated use `TableRowSchema$Outbound` instead. */
  export type Outbound = TableRowSchema$Outbound;
}

export function tableRowSchemaToJSON(tableRowSchema: TableRowSchema): string {
  return JSON.stringify(TableRowSchema$outboundSchema.parse(tableRowSchema));
}

export function tableRowSchemaFromJSON(
  jsonString: string,
): SafeParseResult<TableRowSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableRowSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableRowSchema' from JSON`,
  );
}
