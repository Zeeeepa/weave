/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FeedbackPurgeReqQuery = string | number;

export type FeedbackPurgeReq = {
  projectId: string;
  query: Array<string | number>;
};

/** @internal */
export const FeedbackPurgeReqQuery$inboundSchema: z.ZodType<
  FeedbackPurgeReqQuery,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type FeedbackPurgeReqQuery$Outbound = string | number;

/** @internal */
export const FeedbackPurgeReqQuery$outboundSchema: z.ZodType<
  FeedbackPurgeReqQuery$Outbound,
  z.ZodTypeDef,
  FeedbackPurgeReqQuery
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackPurgeReqQuery$ {
  /** @deprecated use `FeedbackPurgeReqQuery$inboundSchema` instead. */
  export const inboundSchema = FeedbackPurgeReqQuery$inboundSchema;
  /** @deprecated use `FeedbackPurgeReqQuery$outboundSchema` instead. */
  export const outboundSchema = FeedbackPurgeReqQuery$outboundSchema;
  /** @deprecated use `FeedbackPurgeReqQuery$Outbound` instead. */
  export type Outbound = FeedbackPurgeReqQuery$Outbound;
}

export function feedbackPurgeReqQueryToJSON(
  feedbackPurgeReqQuery: FeedbackPurgeReqQuery,
): string {
  return JSON.stringify(
    FeedbackPurgeReqQuery$outboundSchema.parse(feedbackPurgeReqQuery),
  );
}

export function feedbackPurgeReqQueryFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackPurgeReqQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackPurgeReqQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackPurgeReqQuery' from JSON`,
  );
}

/** @internal */
export const FeedbackPurgeReq$inboundSchema: z.ZodType<
  FeedbackPurgeReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  query: z.array(z.union([z.string(), z.number()])),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type FeedbackPurgeReq$Outbound = {
  project_id: string;
  query: Array<string | number>;
};

/** @internal */
export const FeedbackPurgeReq$outboundSchema: z.ZodType<
  FeedbackPurgeReq$Outbound,
  z.ZodTypeDef,
  FeedbackPurgeReq
> = z.object({
  projectId: z.string(),
  query: z.array(z.union([z.string(), z.number()])),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackPurgeReq$ {
  /** @deprecated use `FeedbackPurgeReq$inboundSchema` instead. */
  export const inboundSchema = FeedbackPurgeReq$inboundSchema;
  /** @deprecated use `FeedbackPurgeReq$outboundSchema` instead. */
  export const outboundSchema = FeedbackPurgeReq$outboundSchema;
  /** @deprecated use `FeedbackPurgeReq$Outbound` instead. */
  export type Outbound = FeedbackPurgeReq$Outbound;
}

export function feedbackPurgeReqToJSON(
  feedbackPurgeReq: FeedbackPurgeReq,
): string {
  return JSON.stringify(
    FeedbackPurgeReq$outboundSchema.parse(feedbackPurgeReq),
  );
}

export function feedbackPurgeReqFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackPurgeReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackPurgeReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackPurgeReq' from JSON`,
  );
}
