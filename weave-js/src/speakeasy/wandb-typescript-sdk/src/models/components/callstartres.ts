/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallStartRes = {
  id: string;
  traceId: string;
};

/** @internal */
export const CallStartRes$inboundSchema: z.ZodType<
  CallStartRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  trace_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "trace_id": "traceId",
  });
});

/** @internal */
export type CallStartRes$Outbound = {
  id: string;
  trace_id: string;
};

/** @internal */
export const CallStartRes$outboundSchema: z.ZodType<
  CallStartRes$Outbound,
  z.ZodTypeDef,
  CallStartRes
> = z.object({
  id: z.string(),
  traceId: z.string(),
}).transform((v) => {
  return remap$(v, {
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallStartRes$ {
  /** @deprecated use `CallStartRes$inboundSchema` instead. */
  export const inboundSchema = CallStartRes$inboundSchema;
  /** @deprecated use `CallStartRes$outboundSchema` instead. */
  export const outboundSchema = CallStartRes$outboundSchema;
  /** @deprecated use `CallStartRes$Outbound` instead. */
  export type Outbound = CallStartRes$Outbound;
}

export function callStartResToJSON(callStartRes: CallStartRes): string {
  return JSON.stringify(CallStartRes$outboundSchema.parse(callStartRes));
}

export function callStartResFromJSON(
  jsonString: string,
): SafeParseResult<CallStartRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallStartRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallStartRes' from JSON`,
  );
}
