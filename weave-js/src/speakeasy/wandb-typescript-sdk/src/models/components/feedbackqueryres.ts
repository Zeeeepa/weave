/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Result = {};

export type FeedbackQueryRes = {
  result: Array<Result>;
};

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Result$Outbound = {};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}

/** @internal */
export const FeedbackQueryRes$inboundSchema: z.ZodType<
  FeedbackQueryRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: z.array(z.lazy(() => Result$inboundSchema)),
});

/** @internal */
export type FeedbackQueryRes$Outbound = {
  result: Array<Result$Outbound>;
};

/** @internal */
export const FeedbackQueryRes$outboundSchema: z.ZodType<
  FeedbackQueryRes$Outbound,
  z.ZodTypeDef,
  FeedbackQueryRes
> = z.object({
  result: z.array(z.lazy(() => Result$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackQueryRes$ {
  /** @deprecated use `FeedbackQueryRes$inboundSchema` instead. */
  export const inboundSchema = FeedbackQueryRes$inboundSchema;
  /** @deprecated use `FeedbackQueryRes$outboundSchema` instead. */
  export const outboundSchema = FeedbackQueryRes$outboundSchema;
  /** @deprecated use `FeedbackQueryRes$Outbound` instead. */
  export type Outbound = FeedbackQueryRes$Outbound;
}

export function feedbackQueryResToJSON(
  feedbackQueryRes: FeedbackQueryRes,
): string {
  return JSON.stringify(
    FeedbackQueryRes$outboundSchema.parse(feedbackQueryRes),
  );
}

export function feedbackQueryResFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackQueryRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackQueryRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackQueryRes' from JSON`,
  );
}
