/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Payload = {};

export type FeedbackCreateReq = {
  projectId: string;
  weaveRef: string;
  creator?: string | null | undefined;
  feedbackType: string;
  payload: Payload;
  /**
   * Do not set directly. Server will automatically populate this field.
   */
  wbUserId?: string | null | undefined;
};

/** @internal */
export const Payload$inboundSchema: z.ZodType<Payload, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Payload$Outbound = {};

/** @internal */
export const Payload$outboundSchema: z.ZodType<
  Payload$Outbound,
  z.ZodTypeDef,
  Payload
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Payload$ {
  /** @deprecated use `Payload$inboundSchema` instead. */
  export const inboundSchema = Payload$inboundSchema;
  /** @deprecated use `Payload$outboundSchema` instead. */
  export const outboundSchema = Payload$outboundSchema;
  /** @deprecated use `Payload$Outbound` instead. */
  export type Outbound = Payload$Outbound;
}

export function payloadToJSON(payload: Payload): string {
  return JSON.stringify(Payload$outboundSchema.parse(payload));
}

export function payloadFromJSON(
  jsonString: string,
): SafeParseResult<Payload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Payload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Payload' from JSON`,
  );
}

/** @internal */
export const FeedbackCreateReq$inboundSchema: z.ZodType<
  FeedbackCreateReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  weave_ref: z.string(),
  creator: z.nullable(z.string()).optional(),
  feedback_type: z.string(),
  payload: z.lazy(() => Payload$inboundSchema),
  wb_user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "weave_ref": "weaveRef",
    "feedback_type": "feedbackType",
    "wb_user_id": "wbUserId",
  });
});

/** @internal */
export type FeedbackCreateReq$Outbound = {
  project_id: string;
  weave_ref: string;
  creator?: string | null | undefined;
  feedback_type: string;
  payload: Payload$Outbound;
  wb_user_id?: string | null | undefined;
};

/** @internal */
export const FeedbackCreateReq$outboundSchema: z.ZodType<
  FeedbackCreateReq$Outbound,
  z.ZodTypeDef,
  FeedbackCreateReq
> = z.object({
  projectId: z.string(),
  weaveRef: z.string(),
  creator: z.nullable(z.string()).optional(),
  feedbackType: z.string(),
  payload: z.lazy(() => Payload$outboundSchema),
  wbUserId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    weaveRef: "weave_ref",
    feedbackType: "feedback_type",
    wbUserId: "wb_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackCreateReq$ {
  /** @deprecated use `FeedbackCreateReq$inboundSchema` instead. */
  export const inboundSchema = FeedbackCreateReq$inboundSchema;
  /** @deprecated use `FeedbackCreateReq$outboundSchema` instead. */
  export const outboundSchema = FeedbackCreateReq$outboundSchema;
  /** @deprecated use `FeedbackCreateReq$Outbound` instead. */
  export type Outbound = FeedbackCreateReq$Outbound;
}

export function feedbackCreateReqToJSON(
  feedbackCreateReq: FeedbackCreateReq,
): string {
  return JSON.stringify(
    FeedbackCreateReq$outboundSchema.parse(feedbackCreateReq),
  );
}

export function feedbackCreateReqFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackCreateReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackCreateReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackCreateReq' from JSON`,
  );
}
