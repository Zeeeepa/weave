/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CostQueryOutput,
  CostQueryOutput$inboundSchema,
  CostQueryOutput$Outbound,
  CostQueryOutput$outboundSchema,
} from "./costqueryoutput.js";

export type CostQueryRes = {
  results: Array<CostQueryOutput>;
};

/** @internal */
export const CostQueryRes$inboundSchema: z.ZodType<
  CostQueryRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(CostQueryOutput$inboundSchema),
});

/** @internal */
export type CostQueryRes$Outbound = {
  results: Array<CostQueryOutput$Outbound>;
};

/** @internal */
export const CostQueryRes$outboundSchema: z.ZodType<
  CostQueryRes$Outbound,
  z.ZodTypeDef,
  CostQueryRes
> = z.object({
  results: z.array(CostQueryOutput$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostQueryRes$ {
  /** @deprecated use `CostQueryRes$inboundSchema` instead. */
  export const inboundSchema = CostQueryRes$inboundSchema;
  /** @deprecated use `CostQueryRes$outboundSchema` instead. */
  export const outboundSchema = CostQueryRes$outboundSchema;
  /** @deprecated use `CostQueryRes$Outbound` instead. */
  export type Outbound = CostQueryRes$Outbound;
}

export function costQueryResToJSON(costQueryRes: CostQueryRes): string {
  return JSON.stringify(CostQueryRes$outboundSchema.parse(costQueryRes));
}

export function costQueryResFromJSON(
  jsonString: string,
): SafeParseResult<CostQueryRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostQueryRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostQueryRes' from JSON`,
  );
}
