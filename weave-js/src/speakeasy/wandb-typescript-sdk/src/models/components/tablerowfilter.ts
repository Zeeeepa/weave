/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableRowFilter = {
  /**
   * List of row digests to filter by
   */
  rowDigests?: Array<string> | null | undefined;
};

/** @internal */
export const TableRowFilter$inboundSchema: z.ZodType<
  TableRowFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  row_digests: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "row_digests": "rowDigests",
  });
});

/** @internal */
export type TableRowFilter$Outbound = {
  row_digests?: Array<string> | null | undefined;
};

/** @internal */
export const TableRowFilter$outboundSchema: z.ZodType<
  TableRowFilter$Outbound,
  z.ZodTypeDef,
  TableRowFilter
> = z.object({
  rowDigests: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    rowDigests: "row_digests",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableRowFilter$ {
  /** @deprecated use `TableRowFilter$inboundSchema` instead. */
  export const inboundSchema = TableRowFilter$inboundSchema;
  /** @deprecated use `TableRowFilter$outboundSchema` instead. */
  export const outboundSchema = TableRowFilter$outboundSchema;
  /** @deprecated use `TableRowFilter$Outbound` instead. */
  export type Outbound = TableRowFilter$Outbound;
}

export function tableRowFilterToJSON(tableRowFilter: TableRowFilter): string {
  return JSON.stringify(TableRowFilter$outboundSchema.parse(tableRowFilter));
}

export function tableRowFilterFromJSON(
  jsonString: string,
): SafeParseResult<TableRowFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableRowFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableRowFilter' from JSON`,
  );
}
