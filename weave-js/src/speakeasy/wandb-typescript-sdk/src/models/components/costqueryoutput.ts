/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CostQueryOutput = {
  id?: string | null | undefined;
  llmId?: string | null | undefined;
  promptTokenCost?: number | null | undefined;
  completionTokenCost?: number | null | undefined;
  promptTokenCostUnit?: string | null | undefined;
  completionTokenCostUnit?: string | null | undefined;
  effectiveDate?: Date | null | undefined;
  providerId?: string | null | undefined;
};

/** @internal */
export const CostQueryOutput$inboundSchema: z.ZodType<
  CostQueryOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.nullable(z.string()).optional(),
  llm_id: z.nullable(z.string()).optional(),
  prompt_token_cost: z.nullable(z.number()).optional(),
  completion_token_cost: z.nullable(z.number()).optional(),
  prompt_token_cost_unit: z.nullable(z.string()).optional(),
  completion_token_cost_unit: z.nullable(z.string()).optional(),
  effective_date: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  provider_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "llm_id": "llmId",
    "prompt_token_cost": "promptTokenCost",
    "completion_token_cost": "completionTokenCost",
    "prompt_token_cost_unit": "promptTokenCostUnit",
    "completion_token_cost_unit": "completionTokenCostUnit",
    "effective_date": "effectiveDate",
    "provider_id": "providerId",
  });
});

/** @internal */
export type CostQueryOutput$Outbound = {
  id?: string | null | undefined;
  llm_id?: string | null | undefined;
  prompt_token_cost?: number | null | undefined;
  completion_token_cost?: number | null | undefined;
  prompt_token_cost_unit?: string | null | undefined;
  completion_token_cost_unit?: string | null | undefined;
  effective_date?: string | null | undefined;
  provider_id?: string | null | undefined;
};

/** @internal */
export const CostQueryOutput$outboundSchema: z.ZodType<
  CostQueryOutput$Outbound,
  z.ZodTypeDef,
  CostQueryOutput
> = z.object({
  id: z.nullable(z.string()).optional(),
  llmId: z.nullable(z.string()).optional(),
  promptTokenCost: z.nullable(z.number()).optional(),
  completionTokenCost: z.nullable(z.number()).optional(),
  promptTokenCostUnit: z.nullable(z.string()).optional(),
  completionTokenCostUnit: z.nullable(z.string()).optional(),
  effectiveDate: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  providerId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    llmId: "llm_id",
    promptTokenCost: "prompt_token_cost",
    completionTokenCost: "completion_token_cost",
    promptTokenCostUnit: "prompt_token_cost_unit",
    completionTokenCostUnit: "completion_token_cost_unit",
    effectiveDate: "effective_date",
    providerId: "provider_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CostQueryOutput$ {
  /** @deprecated use `CostQueryOutput$inboundSchema` instead. */
  export const inboundSchema = CostQueryOutput$inboundSchema;
  /** @deprecated use `CostQueryOutput$outboundSchema` instead. */
  export const outboundSchema = CostQueryOutput$outboundSchema;
  /** @deprecated use `CostQueryOutput$Outbound` instead. */
  export type Outbound = CostQueryOutput$Outbound;
}

export function costQueryOutputToJSON(
  costQueryOutput: CostQueryOutput,
): string {
  return JSON.stringify(CostQueryOutput$outboundSchema.parse(costQueryOutput));
}

export function costQueryOutputFromJSON(
  jsonString: string,
): SafeParseResult<CostQueryOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CostQueryOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CostQueryOutput' from JSON`,
  );
}
