/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallUpdateReq = {
  projectId: string;
  callId: string;
  displayName?: string | null | undefined;
  /**
   * Do not set directly. Server will automatically populate this field.
   */
  wbUserId?: string | null | undefined;
};

/** @internal */
export const CallUpdateReq$inboundSchema: z.ZodType<
  CallUpdateReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  call_id: z.string(),
  display_name: z.nullable(z.string()).optional(),
  wb_user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "call_id": "callId",
    "display_name": "displayName",
    "wb_user_id": "wbUserId",
  });
});

/** @internal */
export type CallUpdateReq$Outbound = {
  project_id: string;
  call_id: string;
  display_name?: string | null | undefined;
  wb_user_id?: string | null | undefined;
};

/** @internal */
export const CallUpdateReq$outboundSchema: z.ZodType<
  CallUpdateReq$Outbound,
  z.ZodTypeDef,
  CallUpdateReq
> = z.object({
  projectId: z.string(),
  callId: z.string(),
  displayName: z.nullable(z.string()).optional(),
  wbUserId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    callId: "call_id",
    displayName: "display_name",
    wbUserId: "wb_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallUpdateReq$ {
  /** @deprecated use `CallUpdateReq$inboundSchema` instead. */
  export const inboundSchema = CallUpdateReq$inboundSchema;
  /** @deprecated use `CallUpdateReq$outboundSchema` instead. */
  export const outboundSchema = CallUpdateReq$outboundSchema;
  /** @deprecated use `CallUpdateReq$Outbound` instead. */
  export type Outbound = CallUpdateReq$Outbound;
}

export function callUpdateReqToJSON(callUpdateReq: CallUpdateReq): string {
  return JSON.stringify(CallUpdateReq$outboundSchema.parse(callUpdateReq));
}

export function callUpdateReqFromJSON(
  jsonString: string,
): SafeParseResult<CallUpdateReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallUpdateReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallUpdateReq' from JSON`,
  );
}
