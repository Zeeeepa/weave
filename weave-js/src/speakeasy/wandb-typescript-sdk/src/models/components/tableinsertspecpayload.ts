/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TableInsertSpecPayloadRow = {};

export type TableInsertSpecPayload = {
  index: number;
  row: TableInsertSpecPayloadRow;
};

/** @internal */
export const TableInsertSpecPayloadRow$inboundSchema: z.ZodType<
  TableInsertSpecPayloadRow,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TableInsertSpecPayloadRow$Outbound = {};

/** @internal */
export const TableInsertSpecPayloadRow$outboundSchema: z.ZodType<
  TableInsertSpecPayloadRow$Outbound,
  z.ZodTypeDef,
  TableInsertSpecPayloadRow
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableInsertSpecPayloadRow$ {
  /** @deprecated use `TableInsertSpecPayloadRow$inboundSchema` instead. */
  export const inboundSchema = TableInsertSpecPayloadRow$inboundSchema;
  /** @deprecated use `TableInsertSpecPayloadRow$outboundSchema` instead. */
  export const outboundSchema = TableInsertSpecPayloadRow$outboundSchema;
  /** @deprecated use `TableInsertSpecPayloadRow$Outbound` instead. */
  export type Outbound = TableInsertSpecPayloadRow$Outbound;
}

export function tableInsertSpecPayloadRowToJSON(
  tableInsertSpecPayloadRow: TableInsertSpecPayloadRow,
): string {
  return JSON.stringify(
    TableInsertSpecPayloadRow$outboundSchema.parse(tableInsertSpecPayloadRow),
  );
}

export function tableInsertSpecPayloadRowFromJSON(
  jsonString: string,
): SafeParseResult<TableInsertSpecPayloadRow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableInsertSpecPayloadRow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableInsertSpecPayloadRow' from JSON`,
  );
}

/** @internal */
export const TableInsertSpecPayload$inboundSchema: z.ZodType<
  TableInsertSpecPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int(),
  row: z.lazy(() => TableInsertSpecPayloadRow$inboundSchema),
});

/** @internal */
export type TableInsertSpecPayload$Outbound = {
  index: number;
  row: TableInsertSpecPayloadRow$Outbound;
};

/** @internal */
export const TableInsertSpecPayload$outboundSchema: z.ZodType<
  TableInsertSpecPayload$Outbound,
  z.ZodTypeDef,
  TableInsertSpecPayload
> = z.object({
  index: z.number().int(),
  row: z.lazy(() => TableInsertSpecPayloadRow$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableInsertSpecPayload$ {
  /** @deprecated use `TableInsertSpecPayload$inboundSchema` instead. */
  export const inboundSchema = TableInsertSpecPayload$inboundSchema;
  /** @deprecated use `TableInsertSpecPayload$outboundSchema` instead. */
  export const outboundSchema = TableInsertSpecPayload$outboundSchema;
  /** @deprecated use `TableInsertSpecPayload$Outbound` instead. */
  export type Outbound = TableInsertSpecPayload$Outbound;
}

export function tableInsertSpecPayloadToJSON(
  tableInsertSpecPayload: TableInsertSpecPayload,
): string {
  return JSON.stringify(
    TableInsertSpecPayload$outboundSchema.parse(tableInsertSpecPayload),
  );
}

export function tableInsertSpecPayloadFromJSON(
  jsonString: string,
): SafeParseResult<TableInsertSpecPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableInsertSpecPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableInsertSpecPayload' from JSON`,
  );
}
