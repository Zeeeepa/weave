/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TableAppendSpecPayload,
  TableAppendSpecPayload$inboundSchema,
  TableAppendSpecPayload$Outbound,
  TableAppendSpecPayload$outboundSchema,
} from "./tableappendspecpayload.js";

export type TableAppendSpec = {
  append: TableAppendSpecPayload;
};

/** @internal */
export const TableAppendSpec$inboundSchema: z.ZodType<
  TableAppendSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  append: TableAppendSpecPayload$inboundSchema,
});

/** @internal */
export type TableAppendSpec$Outbound = {
  append: TableAppendSpecPayload$Outbound;
};

/** @internal */
export const TableAppendSpec$outboundSchema: z.ZodType<
  TableAppendSpec$Outbound,
  z.ZodTypeDef,
  TableAppendSpec
> = z.object({
  append: TableAppendSpecPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableAppendSpec$ {
  /** @deprecated use `TableAppendSpec$inboundSchema` instead. */
  export const inboundSchema = TableAppendSpec$inboundSchema;
  /** @deprecated use `TableAppendSpec$outboundSchema` instead. */
  export const outboundSchema = TableAppendSpec$outboundSchema;
  /** @deprecated use `TableAppendSpec$Outbound` instead. */
  export type Outbound = TableAppendSpec$Outbound;
}

export function tableAppendSpecToJSON(
  tableAppendSpec: TableAppendSpec,
): string {
  return JSON.stringify(TableAppendSpec$outboundSchema.parse(tableAppendSpec));
}

export function tableAppendSpecFromJSON(
  jsonString: string,
): SafeParseResult<TableAppendSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableAppendSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableAppendSpec' from JSON`,
  );
}
