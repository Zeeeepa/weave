/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Direction = {
  Asc: "asc",
  Desc: "desc",
} as const;
export type Direction = ClosedEnum<typeof Direction>;

export type SortBy = {
  field: string;
  direction: Direction;
};

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const SortBy$inboundSchema: z.ZodType<SortBy, z.ZodTypeDef, unknown> = z
  .object({
    field: z.string(),
    direction: Direction$inboundSchema,
  });

/** @internal */
export type SortBy$Outbound = {
  field: string;
  direction: string;
};

/** @internal */
export const SortBy$outboundSchema: z.ZodType<
  SortBy$Outbound,
  z.ZodTypeDef,
  SortBy
> = z.object({
  field: z.string(),
  direction: Direction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortBy$ {
  /** @deprecated use `SortBy$inboundSchema` instead. */
  export const inboundSchema = SortBy$inboundSchema;
  /** @deprecated use `SortBy$outboundSchema` instead. */
  export const outboundSchema = SortBy$outboundSchema;
  /** @deprecated use `SortBy$Outbound` instead. */
  export type Outbound = SortBy$Outbound;
}

export function sortByToJSON(sortBy: SortBy): string {
  return JSON.stringify(SortBy$outboundSchema.parse(sortBy));
}

export function sortByFromJSON(
  jsonString: string,
): SafeParseResult<SortBy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SortBy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SortBy' from JSON`,
  );
}
