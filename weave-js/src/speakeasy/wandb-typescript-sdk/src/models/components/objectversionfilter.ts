/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ObjectVersionFilter = {
  /**
   * Filter objects by their base classes
   */
  baseObjectClasses?: Array<string> | null | undefined;
  /**
   * Filter objects by their IDs
   */
  objectIds?: Array<string> | null | undefined;
  /**
   * Filter objects based on whether they are weave.ops or not. `True` will only return ops, `False` will return non-ops, and `None` will return all objects
   */
  isOp?: boolean | null | undefined;
  /**
   * If True, return only the latest version of each object. `False` and `None` will return all versions
   */
  latestOnly?: boolean | null | undefined;
};

/** @internal */
export const ObjectVersionFilter$inboundSchema: z.ZodType<
  ObjectVersionFilter,
  z.ZodTypeDef,
  unknown
> = z.object({
  base_object_classes: z.nullable(z.array(z.string())).optional(),
  object_ids: z.nullable(z.array(z.string())).optional(),
  is_op: z.nullable(z.boolean()).optional(),
  latest_only: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "base_object_classes": "baseObjectClasses",
    "object_ids": "objectIds",
    "is_op": "isOp",
    "latest_only": "latestOnly",
  });
});

/** @internal */
export type ObjectVersionFilter$Outbound = {
  base_object_classes?: Array<string> | null | undefined;
  object_ids?: Array<string> | null | undefined;
  is_op?: boolean | null | undefined;
  latest_only?: boolean | null | undefined;
};

/** @internal */
export const ObjectVersionFilter$outboundSchema: z.ZodType<
  ObjectVersionFilter$Outbound,
  z.ZodTypeDef,
  ObjectVersionFilter
> = z.object({
  baseObjectClasses: z.nullable(z.array(z.string())).optional(),
  objectIds: z.nullable(z.array(z.string())).optional(),
  isOp: z.nullable(z.boolean()).optional(),
  latestOnly: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    baseObjectClasses: "base_object_classes",
    objectIds: "object_ids",
    isOp: "is_op",
    latestOnly: "latest_only",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjectVersionFilter$ {
  /** @deprecated use `ObjectVersionFilter$inboundSchema` instead. */
  export const inboundSchema = ObjectVersionFilter$inboundSchema;
  /** @deprecated use `ObjectVersionFilter$outboundSchema` instead. */
  export const outboundSchema = ObjectVersionFilter$outboundSchema;
  /** @deprecated use `ObjectVersionFilter$Outbound` instead. */
  export type Outbound = ObjectVersionFilter$Outbound;
}

export function objectVersionFilterToJSON(
  objectVersionFilter: ObjectVersionFilter,
): string {
  return JSON.stringify(
    ObjectVersionFilter$outboundSchema.parse(objectVersionFilter),
  );
}

export function objectVersionFilterFromJSON(
  jsonString: string,
): SafeParseResult<ObjectVersionFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjectVersionFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjectVersionFilter' from JSON`,
  );
}
