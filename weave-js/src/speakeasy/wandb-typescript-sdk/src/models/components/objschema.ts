/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ObjSchema = {
  projectId: string;
  objectId: string;
  createdAt: Date;
  deletedAt?: Date | null | undefined;
  digest: string;
  versionIndex: number;
  isLatest: number;
  kind: string;
  baseObjectClass: string | null;
  val?: any | undefined;
};

/** @internal */
export const ObjSchema$inboundSchema: z.ZodType<
  ObjSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  object_id: z.string(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  deleted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  digest: z.string(),
  version_index: z.number().int(),
  is_latest: z.number().int(),
  kind: z.string(),
  base_object_class: z.nullable(z.string()),
  val: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "object_id": "objectId",
    "created_at": "createdAt",
    "deleted_at": "deletedAt",
    "version_index": "versionIndex",
    "is_latest": "isLatest",
    "base_object_class": "baseObjectClass",
  });
});

/** @internal */
export type ObjSchema$Outbound = {
  project_id: string;
  object_id: string;
  created_at: string;
  deleted_at?: string | null | undefined;
  digest: string;
  version_index: number;
  is_latest: number;
  kind: string;
  base_object_class: string | null;
  val?: any | undefined;
};

/** @internal */
export const ObjSchema$outboundSchema: z.ZodType<
  ObjSchema$Outbound,
  z.ZodTypeDef,
  ObjSchema
> = z.object({
  projectId: z.string(),
  objectId: z.string(),
  createdAt: z.date().transform(v => v.toISOString()),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  digest: z.string(),
  versionIndex: z.number().int(),
  isLatest: z.number().int(),
  kind: z.string(),
  baseObjectClass: z.nullable(z.string()),
  val: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    objectId: "object_id",
    createdAt: "created_at",
    deletedAt: "deleted_at",
    versionIndex: "version_index",
    isLatest: "is_latest",
    baseObjectClass: "base_object_class",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjSchema$ {
  /** @deprecated use `ObjSchema$inboundSchema` instead. */
  export const inboundSchema = ObjSchema$inboundSchema;
  /** @deprecated use `ObjSchema$outboundSchema` instead. */
  export const outboundSchema = ObjSchema$outboundSchema;
  /** @deprecated use `ObjSchema$Outbound` instead. */
  export type Outbound = ObjSchema$Outbound;
}

export function objSchemaToJSON(objSchema: ObjSchema): string {
  return JSON.stringify(ObjSchema$outboundSchema.parse(objSchema));
}

export function objSchemaFromJSON(
  jsonString: string,
): SafeParseResult<ObjSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjSchema' from JSON`,
  );
}
