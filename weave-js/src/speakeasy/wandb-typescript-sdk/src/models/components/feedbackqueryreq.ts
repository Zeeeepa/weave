/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SortBy,
  SortBy$inboundSchema,
  SortBy$Outbound,
  SortBy$outboundSchema,
} from "./sortby.js";

export type FeedbackQueryReqQuery = string | number;

export type FeedbackQueryReq = {
  projectId: string;
  fields?: Array<string> | null | undefined;
  query?: Array<string | number> | null | undefined;
  sortBy?: Array<SortBy> | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const FeedbackQueryReqQuery$inboundSchema: z.ZodType<
  FeedbackQueryReqQuery,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number()]);

/** @internal */
export type FeedbackQueryReqQuery$Outbound = string | number;

/** @internal */
export const FeedbackQueryReqQuery$outboundSchema: z.ZodType<
  FeedbackQueryReqQuery$Outbound,
  z.ZodTypeDef,
  FeedbackQueryReqQuery
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackQueryReqQuery$ {
  /** @deprecated use `FeedbackQueryReqQuery$inboundSchema` instead. */
  export const inboundSchema = FeedbackQueryReqQuery$inboundSchema;
  /** @deprecated use `FeedbackQueryReqQuery$outboundSchema` instead. */
  export const outboundSchema = FeedbackQueryReqQuery$outboundSchema;
  /** @deprecated use `FeedbackQueryReqQuery$Outbound` instead. */
  export type Outbound = FeedbackQueryReqQuery$Outbound;
}

export function feedbackQueryReqQueryToJSON(
  feedbackQueryReqQuery: FeedbackQueryReqQuery,
): string {
  return JSON.stringify(
    FeedbackQueryReqQuery$outboundSchema.parse(feedbackQueryReqQuery),
  );
}

export function feedbackQueryReqQueryFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackQueryReqQuery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackQueryReqQuery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackQueryReqQuery' from JSON`,
  );
}

/** @internal */
export const FeedbackQueryReq$inboundSchema: z.ZodType<
  FeedbackQueryReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  fields: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  sort_by: z.nullable(z.array(SortBy$inboundSchema)).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "sort_by": "sortBy",
  });
});

/** @internal */
export type FeedbackQueryReq$Outbound = {
  project_id: string;
  fields?: Array<string> | null | undefined;
  query?: Array<string | number> | null | undefined;
  sort_by?: Array<SortBy$Outbound> | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
};

/** @internal */
export const FeedbackQueryReq$outboundSchema: z.ZodType<
  FeedbackQueryReq$Outbound,
  z.ZodTypeDef,
  FeedbackQueryReq
> = z.object({
  projectId: z.string(),
  fields: z.nullable(z.array(z.string())).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
  sortBy: z.nullable(z.array(SortBy$outboundSchema)).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FeedbackQueryReq$ {
  /** @deprecated use `FeedbackQueryReq$inboundSchema` instead. */
  export const inboundSchema = FeedbackQueryReq$inboundSchema;
  /** @deprecated use `FeedbackQueryReq$outboundSchema` instead. */
  export const outboundSchema = FeedbackQueryReq$outboundSchema;
  /** @deprecated use `FeedbackQueryReq$Outbound` instead. */
  export type Outbound = FeedbackQueryReq$Outbound;
}

export function feedbackQueryReqToJSON(
  feedbackQueryReq: FeedbackQueryReq,
): string {
  return JSON.stringify(
    FeedbackQueryReq$outboundSchema.parse(feedbackQueryReq),
  );
}

export function feedbackQueryReqFromJSON(
  jsonString: string,
): SafeParseResult<FeedbackQueryReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FeedbackQueryReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FeedbackQueryReq' from JSON`,
  );
}
