/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ObjSchemaForInsert = {
  projectId: string;
  objectId: string;
  val?: any | undefined;
  setBaseObjectClass?: string | null | undefined;
};

/** @internal */
export const ObjSchemaForInsert$inboundSchema: z.ZodType<
  ObjSchemaForInsert,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  object_id: z.string(),
  val: z.any().optional(),
  set_base_object_class: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "object_id": "objectId",
    "set_base_object_class": "setBaseObjectClass",
  });
});

/** @internal */
export type ObjSchemaForInsert$Outbound = {
  project_id: string;
  object_id: string;
  val?: any | undefined;
  set_base_object_class?: string | null | undefined;
};

/** @internal */
export const ObjSchemaForInsert$outboundSchema: z.ZodType<
  ObjSchemaForInsert$Outbound,
  z.ZodTypeDef,
  ObjSchemaForInsert
> = z.object({
  projectId: z.string(),
  objectId: z.string(),
  val: z.any().optional(),
  setBaseObjectClass: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    objectId: "object_id",
    setBaseObjectClass: "set_base_object_class",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ObjSchemaForInsert$ {
  /** @deprecated use `ObjSchemaForInsert$inboundSchema` instead. */
  export const inboundSchema = ObjSchemaForInsert$inboundSchema;
  /** @deprecated use `ObjSchemaForInsert$outboundSchema` instead. */
  export const outboundSchema = ObjSchemaForInsert$outboundSchema;
  /** @deprecated use `ObjSchemaForInsert$Outbound` instead. */
  export type Outbound = ObjSchemaForInsert$Outbound;
}

export function objSchemaForInsertToJSON(
  objSchemaForInsert: ObjSchemaForInsert,
): string {
  return JSON.stringify(
    ObjSchemaForInsert$outboundSchema.parse(objSchemaForInsert),
  );
}

export function objSchemaForInsertFromJSON(
  jsonString: string,
): SafeParseResult<ObjSchemaForInsert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ObjSchemaForInsert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ObjSchemaForInsert' from JSON`,
  );
}
