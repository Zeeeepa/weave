/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TableInsertSpecPayload,
  TableInsertSpecPayload$inboundSchema,
  TableInsertSpecPayload$Outbound,
  TableInsertSpecPayload$outboundSchema,
} from "./tableinsertspecpayload.js";

export type TableInsertSpec = {
  insert: TableInsertSpecPayload;
};

/** @internal */
export const TableInsertSpec$inboundSchema: z.ZodType<
  TableInsertSpec,
  z.ZodTypeDef,
  unknown
> = z.object({
  insert: TableInsertSpecPayload$inboundSchema,
});

/** @internal */
export type TableInsertSpec$Outbound = {
  insert: TableInsertSpecPayload$Outbound;
};

/** @internal */
export const TableInsertSpec$outboundSchema: z.ZodType<
  TableInsertSpec$Outbound,
  z.ZodTypeDef,
  TableInsertSpec
> = z.object({
  insert: TableInsertSpecPayload$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableInsertSpec$ {
  /** @deprecated use `TableInsertSpec$inboundSchema` instead. */
  export const inboundSchema = TableInsertSpec$inboundSchema;
  /** @deprecated use `TableInsertSpec$outboundSchema` instead. */
  export const outboundSchema = TableInsertSpec$outboundSchema;
  /** @deprecated use `TableInsertSpec$Outbound` instead. */
  export type Outbound = TableInsertSpec$Outbound;
}

export function tableInsertSpecToJSON(
  tableInsertSpec: TableInsertSpec,
): string {
  return JSON.stringify(TableInsertSpec$outboundSchema.parse(tableInsertSpec));
}

export function tableInsertSpecFromJSON(
  jsonString: string,
): SafeParseResult<TableInsertSpec, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableInsertSpec$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableInsertSpec' from JSON`,
  );
}
