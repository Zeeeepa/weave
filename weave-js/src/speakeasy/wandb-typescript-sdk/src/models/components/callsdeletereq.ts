/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallsDeleteReq = {
  projectId: string;
  callIds: Array<string>;
  /**
   * Do not set directly. Server will automatically populate this field.
   */
  wbUserId?: string | null | undefined;
};

/** @internal */
export const CallsDeleteReq$inboundSchema: z.ZodType<
  CallsDeleteReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  call_ids: z.array(z.string()),
  wb_user_id: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "call_ids": "callIds",
    "wb_user_id": "wbUserId",
  });
});

/** @internal */
export type CallsDeleteReq$Outbound = {
  project_id: string;
  call_ids: Array<string>;
  wb_user_id?: string | null | undefined;
};

/** @internal */
export const CallsDeleteReq$outboundSchema: z.ZodType<
  CallsDeleteReq$Outbound,
  z.ZodTypeDef,
  CallsDeleteReq
> = z.object({
  projectId: z.string(),
  callIds: z.array(z.string()),
  wbUserId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    callIds: "call_ids",
    wbUserId: "wb_user_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallsDeleteReq$ {
  /** @deprecated use `CallsDeleteReq$inboundSchema` instead. */
  export const inboundSchema = CallsDeleteReq$inboundSchema;
  /** @deprecated use `CallsDeleteReq$outboundSchema` instead. */
  export const outboundSchema = CallsDeleteReq$outboundSchema;
  /** @deprecated use `CallsDeleteReq$Outbound` instead. */
  export type Outbound = CallsDeleteReq$Outbound;
}

export function callsDeleteReqToJSON(callsDeleteReq: CallsDeleteReq): string {
  return JSON.stringify(CallsDeleteReq$outboundSchema.parse(callsDeleteReq));
}

export function callsDeleteReqFromJSON(
  jsonString: string,
): SafeParseResult<CallsDeleteReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallsDeleteReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallsDeleteReq' from JSON`,
  );
}
