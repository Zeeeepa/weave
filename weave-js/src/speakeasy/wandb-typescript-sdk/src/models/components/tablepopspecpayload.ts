/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type TablePopSpecPayload = {
  index: number;
};

/** @internal */
export const TablePopSpecPayload$inboundSchema: z.ZodType<
  TablePopSpecPayload,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number().int(),
});

/** @internal */
export type TablePopSpecPayload$Outbound = {
  index: number;
};

/** @internal */
export const TablePopSpecPayload$outboundSchema: z.ZodType<
  TablePopSpecPayload$Outbound,
  z.ZodTypeDef,
  TablePopSpecPayload
> = z.object({
  index: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TablePopSpecPayload$ {
  /** @deprecated use `TablePopSpecPayload$inboundSchema` instead. */
  export const inboundSchema = TablePopSpecPayload$inboundSchema;
  /** @deprecated use `TablePopSpecPayload$outboundSchema` instead. */
  export const outboundSchema = TablePopSpecPayload$outboundSchema;
  /** @deprecated use `TablePopSpecPayload$Outbound` instead. */
  export type Outbound = TablePopSpecPayload$Outbound;
}

export function tablePopSpecPayloadToJSON(
  tablePopSpecPayload: TablePopSpecPayload,
): string {
  return JSON.stringify(
    TablePopSpecPayload$outboundSchema.parse(tablePopSpecPayload),
  );
}

export function tablePopSpecPayloadFromJSON(
  jsonString: string,
): SafeParseResult<TablePopSpecPayload, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TablePopSpecPayload$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TablePopSpecPayload' from JSON`,
  );
}
