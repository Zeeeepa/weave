/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallSchemaAttributes = {};

export type CallSchemaInputs = {};

export type Summary = {};

export type CallSchema = {
  id: string;
  projectId: string;
  opName: string;
  displayName?: string | null | undefined;
  traceId: string;
  parentId?: string | null | undefined;
  startedAt: Date;
  attributes: CallSchemaAttributes;
  inputs: CallSchemaInputs;
  endedAt?: Date | null | undefined;
  exception?: string | null | undefined;
  output?: any | null | undefined;
  summary?: Summary | undefined;
  wbUserId?: string | null | undefined;
  wbRunId?: string | null | undefined;
  deletedAt?: Date | null | undefined;
};

/** @internal */
export const CallSchemaAttributes$inboundSchema: z.ZodType<
  CallSchemaAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CallSchemaAttributes$Outbound = {};

/** @internal */
export const CallSchemaAttributes$outboundSchema: z.ZodType<
  CallSchemaAttributes$Outbound,
  z.ZodTypeDef,
  CallSchemaAttributes
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSchemaAttributes$ {
  /** @deprecated use `CallSchemaAttributes$inboundSchema` instead. */
  export const inboundSchema = CallSchemaAttributes$inboundSchema;
  /** @deprecated use `CallSchemaAttributes$outboundSchema` instead. */
  export const outboundSchema = CallSchemaAttributes$outboundSchema;
  /** @deprecated use `CallSchemaAttributes$Outbound` instead. */
  export type Outbound = CallSchemaAttributes$Outbound;
}

export function callSchemaAttributesToJSON(
  callSchemaAttributes: CallSchemaAttributes,
): string {
  return JSON.stringify(
    CallSchemaAttributes$outboundSchema.parse(callSchemaAttributes),
  );
}

export function callSchemaAttributesFromJSON(
  jsonString: string,
): SafeParseResult<CallSchemaAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSchemaAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSchemaAttributes' from JSON`,
  );
}

/** @internal */
export const CallSchemaInputs$inboundSchema: z.ZodType<
  CallSchemaInputs,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CallSchemaInputs$Outbound = {};

/** @internal */
export const CallSchemaInputs$outboundSchema: z.ZodType<
  CallSchemaInputs$Outbound,
  z.ZodTypeDef,
  CallSchemaInputs
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSchemaInputs$ {
  /** @deprecated use `CallSchemaInputs$inboundSchema` instead. */
  export const inboundSchema = CallSchemaInputs$inboundSchema;
  /** @deprecated use `CallSchemaInputs$outboundSchema` instead. */
  export const outboundSchema = CallSchemaInputs$outboundSchema;
  /** @deprecated use `CallSchemaInputs$Outbound` instead. */
  export type Outbound = CallSchemaInputs$Outbound;
}

export function callSchemaInputsToJSON(
  callSchemaInputs: CallSchemaInputs,
): string {
  return JSON.stringify(
    CallSchemaInputs$outboundSchema.parse(callSchemaInputs),
  );
}

export function callSchemaInputsFromJSON(
  jsonString: string,
): SafeParseResult<CallSchemaInputs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSchemaInputs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSchemaInputs' from JSON`,
  );
}

/** @internal */
export const Summary$inboundSchema: z.ZodType<Summary, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Summary$Outbound = {};

/** @internal */
export const Summary$outboundSchema: z.ZodType<
  Summary$Outbound,
  z.ZodTypeDef,
  Summary
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Summary$ {
  /** @deprecated use `Summary$inboundSchema` instead. */
  export const inboundSchema = Summary$inboundSchema;
  /** @deprecated use `Summary$outboundSchema` instead. */
  export const outboundSchema = Summary$outboundSchema;
  /** @deprecated use `Summary$Outbound` instead. */
  export type Outbound = Summary$Outbound;
}

export function summaryToJSON(summary: Summary): string {
  return JSON.stringify(Summary$outboundSchema.parse(summary));
}

export function summaryFromJSON(
  jsonString: string,
): SafeParseResult<Summary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Summary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Summary' from JSON`,
  );
}

/** @internal */
export const CallSchema$inboundSchema: z.ZodType<
  CallSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  project_id: z.string(),
  op_name: z.string(),
  display_name: z.nullable(z.string()).optional(),
  trace_id: z.string(),
  parent_id: z.nullable(z.string()).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  attributes: z.lazy(() => CallSchemaAttributes$inboundSchema),
  inputs: z.lazy(() => CallSchemaInputs$inboundSchema),
  ended_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  exception: z.nullable(z.string()).optional(),
  output: z.nullable(z.any()).optional(),
  summary: z.lazy(() => Summary$inboundSchema).optional(),
  wb_user_id: z.nullable(z.string()).optional(),
  wb_run_id: z.nullable(z.string()).optional(),
  deleted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "op_name": "opName",
    "display_name": "displayName",
    "trace_id": "traceId",
    "parent_id": "parentId",
    "started_at": "startedAt",
    "ended_at": "endedAt",
    "wb_user_id": "wbUserId",
    "wb_run_id": "wbRunId",
    "deleted_at": "deletedAt",
  });
});

/** @internal */
export type CallSchema$Outbound = {
  id: string;
  project_id: string;
  op_name: string;
  display_name?: string | null | undefined;
  trace_id: string;
  parent_id?: string | null | undefined;
  started_at: string;
  attributes: CallSchemaAttributes$Outbound;
  inputs: CallSchemaInputs$Outbound;
  ended_at?: string | null | undefined;
  exception?: string | null | undefined;
  output?: any | null | undefined;
  summary?: Summary$Outbound | undefined;
  wb_user_id?: string | null | undefined;
  wb_run_id?: string | null | undefined;
  deleted_at?: string | null | undefined;
};

/** @internal */
export const CallSchema$outboundSchema: z.ZodType<
  CallSchema$Outbound,
  z.ZodTypeDef,
  CallSchema
> = z.object({
  id: z.string(),
  projectId: z.string(),
  opName: z.string(),
  displayName: z.nullable(z.string()).optional(),
  traceId: z.string(),
  parentId: z.nullable(z.string()).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  attributes: z.lazy(() => CallSchemaAttributes$outboundSchema),
  inputs: z.lazy(() => CallSchemaInputs$outboundSchema),
  endedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  exception: z.nullable(z.string()).optional(),
  output: z.nullable(z.any()).optional(),
  summary: z.lazy(() => Summary$outboundSchema).optional(),
  wbUserId: z.nullable(z.string()).optional(),
  wbRunId: z.nullable(z.string()).optional(),
  deletedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    opName: "op_name",
    displayName: "display_name",
    traceId: "trace_id",
    parentId: "parent_id",
    startedAt: "started_at",
    endedAt: "ended_at",
    wbUserId: "wb_user_id",
    wbRunId: "wb_run_id",
    deletedAt: "deleted_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallSchema$ {
  /** @deprecated use `CallSchema$inboundSchema` instead. */
  export const inboundSchema = CallSchema$inboundSchema;
  /** @deprecated use `CallSchema$outboundSchema` instead. */
  export const outboundSchema = CallSchema$outboundSchema;
  /** @deprecated use `CallSchema$Outbound` instead. */
  export type Outbound = CallSchema$Outbound;
}

export function callSchemaToJSON(callSchema: CallSchema): string {
  return JSON.stringify(CallSchema$outboundSchema.parse(callSchema));
}

export function callSchemaFromJSON(
  jsonString: string,
): SafeParseResult<CallSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallSchema' from JSON`,
  );
}
