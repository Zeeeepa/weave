/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CallsFilter,
  CallsFilter$inboundSchema,
  CallsFilter$Outbound,
  CallsFilter$outboundSchema,
} from "./callsfilter.js";

export type Query = string | number;

export type CallsQueryStatsReq = {
  projectId: string;
  filter?: CallsFilter | null | undefined;
  query?: Array<string | number> | null | undefined;
};

/** @internal */
export const Query$inboundSchema: z.ZodType<Query, z.ZodTypeDef, unknown> = z
  .union([z.string(), z.number()]);

/** @internal */
export type Query$Outbound = string | number;

/** @internal */
export const Query$outboundSchema: z.ZodType<
  Query$Outbound,
  z.ZodTypeDef,
  Query
> = z.union([z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Query$ {
  /** @deprecated use `Query$inboundSchema` instead. */
  export const inboundSchema = Query$inboundSchema;
  /** @deprecated use `Query$outboundSchema` instead. */
  export const outboundSchema = Query$outboundSchema;
  /** @deprecated use `Query$Outbound` instead. */
  export type Outbound = Query$Outbound;
}

export function queryToJSON(query: Query): string {
  return JSON.stringify(Query$outboundSchema.parse(query));
}

export function queryFromJSON(
  jsonString: string,
): SafeParseResult<Query, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Query$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Query' from JSON`,
  );
}

/** @internal */
export const CallsQueryStatsReq$inboundSchema: z.ZodType<
  CallsQueryStatsReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  filter: z.nullable(CallsFilter$inboundSchema).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
  });
});

/** @internal */
export type CallsQueryStatsReq$Outbound = {
  project_id: string;
  filter?: CallsFilter$Outbound | null | undefined;
  query?: Array<string | number> | null | undefined;
};

/** @internal */
export const CallsQueryStatsReq$outboundSchema: z.ZodType<
  CallsQueryStatsReq$Outbound,
  z.ZodTypeDef,
  CallsQueryStatsReq
> = z.object({
  projectId: z.string(),
  filter: z.nullable(CallsFilter$outboundSchema).optional(),
  query: z.nullable(z.array(z.union([z.string(), z.number()]))).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallsQueryStatsReq$ {
  /** @deprecated use `CallsQueryStatsReq$inboundSchema` instead. */
  export const inboundSchema = CallsQueryStatsReq$inboundSchema;
  /** @deprecated use `CallsQueryStatsReq$outboundSchema` instead. */
  export const outboundSchema = CallsQueryStatsReq$outboundSchema;
  /** @deprecated use `CallsQueryStatsReq$Outbound` instead. */
  export type Outbound = CallsQueryStatsReq$Outbound;
}

export function callsQueryStatsReqToJSON(
  callsQueryStatsReq: CallsQueryStatsReq,
): string {
  return JSON.stringify(
    CallsQueryStatsReq$outboundSchema.parse(callsQueryStatsReq),
  );
}

export function callsQueryStatsReqFromJSON(
  jsonString: string,
): SafeParseResult<CallsQueryStatsReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallsQueryStatsReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallsQueryStatsReq' from JSON`,
  );
}
