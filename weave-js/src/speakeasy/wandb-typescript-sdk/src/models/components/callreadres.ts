/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CallSchema,
  CallSchema$inboundSchema,
  CallSchema$Outbound,
  CallSchema$outboundSchema,
} from "./callschema.js";

export type CallReadRes = {
  call: CallSchema | null;
};

/** @internal */
export const CallReadRes$inboundSchema: z.ZodType<
  CallReadRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  call: z.nullable(CallSchema$inboundSchema),
});

/** @internal */
export type CallReadRes$Outbound = {
  call: CallSchema$Outbound | null;
};

/** @internal */
export const CallReadRes$outboundSchema: z.ZodType<
  CallReadRes$Outbound,
  z.ZodTypeDef,
  CallReadRes
> = z.object({
  call: z.nullable(CallSchema$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallReadRes$ {
  /** @deprecated use `CallReadRes$inboundSchema` instead. */
  export const inboundSchema = CallReadRes$inboundSchema;
  /** @deprecated use `CallReadRes$outboundSchema` instead. */
  export const outboundSchema = CallReadRes$outboundSchema;
  /** @deprecated use `CallReadRes$Outbound` instead. */
  export type Outbound = CallReadRes$Outbound;
}

export function callReadResToJSON(callReadRes: CallReadRes): string {
  return JSON.stringify(CallReadRes$outboundSchema.parse(callReadRes));
}

export function callReadResFromJSON(
  jsonString: string,
): SafeParseResult<CallReadRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallReadRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallReadRes' from JSON`,
  );
}
