/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TableRowSchema,
  TableRowSchema$inboundSchema,
  TableRowSchema$Outbound,
  TableRowSchema$outboundSchema,
} from "./tablerowschema.js";

export type TableQueryRes = {
  rows: Array<TableRowSchema>;
};

/** @internal */
export const TableQueryRes$inboundSchema: z.ZodType<
  TableQueryRes,
  z.ZodTypeDef,
  unknown
> = z.object({
  rows: z.array(TableRowSchema$inboundSchema),
});

/** @internal */
export type TableQueryRes$Outbound = {
  rows: Array<TableRowSchema$Outbound>;
};

/** @internal */
export const TableQueryRes$outboundSchema: z.ZodType<
  TableQueryRes$Outbound,
  z.ZodTypeDef,
  TableQueryRes
> = z.object({
  rows: z.array(TableRowSchema$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableQueryRes$ {
  /** @deprecated use `TableQueryRes$inboundSchema` instead. */
  export const inboundSchema = TableQueryRes$inboundSchema;
  /** @deprecated use `TableQueryRes$outboundSchema` instead. */
  export const outboundSchema = TableQueryRes$outboundSchema;
  /** @deprecated use `TableQueryRes$Outbound` instead. */
  export type Outbound = TableQueryRes$Outbound;
}

export function tableQueryResToJSON(tableQueryRes: TableQueryRes): string {
  return JSON.stringify(TableQueryRes$outboundSchema.parse(tableQueryRes));
}

export function tableQueryResFromJSON(
  jsonString: string,
): SafeParseResult<TableQueryRes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableQueryRes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableQueryRes' from JSON`,
  );
}
