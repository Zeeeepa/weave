/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CallBatchEndMode,
  CallBatchEndMode$inboundSchema,
  CallBatchEndMode$Outbound,
  CallBatchEndMode$outboundSchema,
} from "./callbatchendmode.js";
import {
  CallBatchStartMode,
  CallBatchStartMode$inboundSchema,
  CallBatchStartMode$Outbound,
  CallBatchStartMode$outboundSchema,
} from "./callbatchstartmode.js";

export type Batch = CallBatchStartMode | CallBatchEndMode;

export type CallCreateBatchReq = {
  batch: Array<CallBatchStartMode | CallBatchEndMode>;
};

/** @internal */
export const Batch$inboundSchema: z.ZodType<Batch, z.ZodTypeDef, unknown> = z
  .union([CallBatchStartMode$inboundSchema, CallBatchEndMode$inboundSchema]);

/** @internal */
export type Batch$Outbound =
  | CallBatchStartMode$Outbound
  | CallBatchEndMode$Outbound;

/** @internal */
export const Batch$outboundSchema: z.ZodType<
  Batch$Outbound,
  z.ZodTypeDef,
  Batch
> = z.union([
  CallBatchStartMode$outboundSchema,
  CallBatchEndMode$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Batch$ {
  /** @deprecated use `Batch$inboundSchema` instead. */
  export const inboundSchema = Batch$inboundSchema;
  /** @deprecated use `Batch$outboundSchema` instead. */
  export const outboundSchema = Batch$outboundSchema;
  /** @deprecated use `Batch$Outbound` instead. */
  export type Outbound = Batch$Outbound;
}

export function batchToJSON(batch: Batch): string {
  return JSON.stringify(Batch$outboundSchema.parse(batch));
}

export function batchFromJSON(
  jsonString: string,
): SafeParseResult<Batch, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Batch$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Batch' from JSON`,
  );
}

/** @internal */
export const CallCreateBatchReq$inboundSchema: z.ZodType<
  CallCreateBatchReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  batch: z.array(
    z.union([CallBatchStartMode$inboundSchema, CallBatchEndMode$inboundSchema]),
  ),
});

/** @internal */
export type CallCreateBatchReq$Outbound = {
  batch: Array<CallBatchStartMode$Outbound | CallBatchEndMode$Outbound>;
};

/** @internal */
export const CallCreateBatchReq$outboundSchema: z.ZodType<
  CallCreateBatchReq$Outbound,
  z.ZodTypeDef,
  CallCreateBatchReq
> = z.object({
  batch: z.array(
    z.union([
      CallBatchStartMode$outboundSchema,
      CallBatchEndMode$outboundSchema,
    ]),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallCreateBatchReq$ {
  /** @deprecated use `CallCreateBatchReq$inboundSchema` instead. */
  export const inboundSchema = CallCreateBatchReq$inboundSchema;
  /** @deprecated use `CallCreateBatchReq$outboundSchema` instead. */
  export const outboundSchema = CallCreateBatchReq$outboundSchema;
  /** @deprecated use `CallCreateBatchReq$Outbound` instead. */
  export type Outbound = CallCreateBatchReq$Outbound;
}

export function callCreateBatchReqToJSON(
  callCreateBatchReq: CallCreateBatchReq,
): string {
  return JSON.stringify(
    CallCreateBatchReq$outboundSchema.parse(callCreateBatchReq),
  );
}

export function callCreateBatchReqFromJSON(
  jsonString: string,
): SafeParseResult<CallCreateBatchReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallCreateBatchReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallCreateBatchReq' from JSON`,
  );
}
