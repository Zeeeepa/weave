/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CallReadReq = {
  projectId: string;
  id: string;
  includeCosts?: boolean | null | undefined;
};

/** @internal */
export const CallReadReq$inboundSchema: z.ZodType<
  CallReadReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  id: z.string(),
  include_costs: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "include_costs": "includeCosts",
  });
});

/** @internal */
export type CallReadReq$Outbound = {
  project_id: string;
  id: string;
  include_costs?: boolean | null | undefined;
};

/** @internal */
export const CallReadReq$outboundSchema: z.ZodType<
  CallReadReq$Outbound,
  z.ZodTypeDef,
  CallReadReq
> = z.object({
  projectId: z.string(),
  id: z.string(),
  includeCosts: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    includeCosts: "include_costs",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CallReadReq$ {
  /** @deprecated use `CallReadReq$inboundSchema` instead. */
  export const inboundSchema = CallReadReq$inboundSchema;
  /** @deprecated use `CallReadReq$outboundSchema` instead. */
  export const outboundSchema = CallReadReq$outboundSchema;
  /** @deprecated use `CallReadReq$Outbound` instead. */
  export type Outbound = CallReadReq$Outbound;
}

export function callReadReqToJSON(callReadReq: CallReadReq): string {
  return JSON.stringify(CallReadReq$outboundSchema.parse(callReadReq));
}

export function callReadReqFromJSON(
  jsonString: string,
): SafeParseResult<CallReadReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CallReadReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CallReadReq' from JSON`,
  );
}
