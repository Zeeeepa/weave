/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SummaryInsertMap,
  SummaryInsertMap$inboundSchema,
  SummaryInsertMap$Outbound,
  SummaryInsertMap$outboundSchema,
} from "./summaryinsertmap.js";

export type EndedCallSchemaForInsert = {
  projectId: string;
  id: string;
  endedAt: Date;
  exception?: string | null | undefined;
  output?: any | null | undefined;
  summary: SummaryInsertMap;
};

/** @internal */
export const EndedCallSchemaForInsert$inboundSchema: z.ZodType<
  EndedCallSchemaForInsert,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  id: z.string(),
  ended_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  exception: z.nullable(z.string()).optional(),
  output: z.nullable(z.any()).optional(),
  summary: SummaryInsertMap$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "ended_at": "endedAt",
  });
});

/** @internal */
export type EndedCallSchemaForInsert$Outbound = {
  project_id: string;
  id: string;
  ended_at: string;
  exception?: string | null | undefined;
  output?: any | null | undefined;
  summary: SummaryInsertMap$Outbound;
};

/** @internal */
export const EndedCallSchemaForInsert$outboundSchema: z.ZodType<
  EndedCallSchemaForInsert$Outbound,
  z.ZodTypeDef,
  EndedCallSchemaForInsert
> = z.object({
  projectId: z.string(),
  id: z.string(),
  endedAt: z.date().transform(v => v.toISOString()),
  exception: z.nullable(z.string()).optional(),
  output: z.nullable(z.any()).optional(),
  summary: SummaryInsertMap$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    endedAt: "ended_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EndedCallSchemaForInsert$ {
  /** @deprecated use `EndedCallSchemaForInsert$inboundSchema` instead. */
  export const inboundSchema = EndedCallSchemaForInsert$inboundSchema;
  /** @deprecated use `EndedCallSchemaForInsert$outboundSchema` instead. */
  export const outboundSchema = EndedCallSchemaForInsert$outboundSchema;
  /** @deprecated use `EndedCallSchemaForInsert$Outbound` instead. */
  export type Outbound = EndedCallSchemaForInsert$Outbound;
}

export function endedCallSchemaForInsertToJSON(
  endedCallSchemaForInsert: EndedCallSchemaForInsert,
): string {
  return JSON.stringify(
    EndedCallSchemaForInsert$outboundSchema.parse(endedCallSchemaForInsert),
  );
}

export function endedCallSchemaForInsertFromJSON(
  jsonString: string,
): SafeParseResult<EndedCallSchemaForInsert, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EndedCallSchemaForInsert$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EndedCallSchemaForInsert' from JSON`,
  );
}
