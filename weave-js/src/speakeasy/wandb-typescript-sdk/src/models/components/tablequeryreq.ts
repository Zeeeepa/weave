/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SortBy,
  SortBy$inboundSchema,
  SortBy$Outbound,
  SortBy$outboundSchema,
} from "./sortby.js";
import {
  TableRowFilter,
  TableRowFilter$inboundSchema,
  TableRowFilter$Outbound,
  TableRowFilter$outboundSchema,
} from "./tablerowfilter.js";

export type TableQueryReq = {
  /**
   * The ID of the project
   */
  projectId: string;
  /**
   * The digest of the table to query
   */
  digest: string;
  /**
   * Optional filter to apply to the query. See `TableRowFilter` for more details.
   */
  filter?: TableRowFilter | null | undefined;
  /**
   * Maximum number of rows to return
   */
  limit?: number | null | undefined;
  /**
   * Number of rows to skip before starting to return rows
   */
  offset?: number | null | undefined;
  /**
   * List of fields to sort by. Fields can be dot-separated to access dictionary values. No sorting uses the default table order (insertion order).
   */
  sortBy?: Array<SortBy> | null | undefined;
};

/** @internal */
export const TableQueryReq$inboundSchema: z.ZodType<
  TableQueryReq,
  z.ZodTypeDef,
  unknown
> = z.object({
  project_id: z.string(),
  digest: z.string(),
  filter: z.nullable(TableRowFilter$inboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sort_by: z.nullable(z.array(SortBy$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "project_id": "projectId",
    "sort_by": "sortBy",
  });
});

/** @internal */
export type TableQueryReq$Outbound = {
  project_id: string;
  digest: string;
  filter?: TableRowFilter$Outbound | null | undefined;
  limit?: number | null | undefined;
  offset?: number | null | undefined;
  sort_by?: Array<SortBy$Outbound> | null | undefined;
};

/** @internal */
export const TableQueryReq$outboundSchema: z.ZodType<
  TableQueryReq$Outbound,
  z.ZodTypeDef,
  TableQueryReq
> = z.object({
  projectId: z.string(),
  digest: z.string(),
  filter: z.nullable(TableRowFilter$outboundSchema).optional(),
  limit: z.nullable(z.number().int()).optional(),
  offset: z.nullable(z.number().int()).optional(),
  sortBy: z.nullable(z.array(SortBy$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    projectId: "project_id",
    sortBy: "sort_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TableQueryReq$ {
  /** @deprecated use `TableQueryReq$inboundSchema` instead. */
  export const inboundSchema = TableQueryReq$inboundSchema;
  /** @deprecated use `TableQueryReq$outboundSchema` instead. */
  export const outboundSchema = TableQueryReq$outboundSchema;
  /** @deprecated use `TableQueryReq$Outbound` instead. */
  export type Outbound = TableQueryReq$Outbound;
}

export function tableQueryReqToJSON(tableQueryReq: TableQueryReq): string {
  return JSON.stringify(TableQueryReq$outboundSchema.parse(tableQueryReq));
}

export function tableQueryReqFromJSON(
  jsonString: string,
): SafeParseResult<TableQueryReq, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TableQueryReq$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TableQueryReq' from JSON`,
  );
}
